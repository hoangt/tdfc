#define MAX		5	// Max # of consecutives zeros
#define ZERO_MARK	64	// bit-mask for "zero vs. one" output-bit

// Dynamic output
 ZLE (input signed[8] a, output signed[8] o)
  {
   unsigned[7] cnt=0; 
   state nopend(a):
       if (a==0)   {cnt=1; goto zero; }
       else o=a; // and stay
   state zero(a): 
     if (a==0)  
       if (cnt==MAX-1)   {  o=(MAX|ZERO_MARK); stay; }
       else cnt=cnt+1;
    else
       if (cnt>0)   { o=(cnt|ZERO_MARK); goto pending; }
       else {  o=a; goto nopend; }
   state pending(a):
       if (a==0)   {cnt=1;  o=a@1; goto zero; }
       else {  o=a@1; goto pending; }
 }  

// dynamic input
 Sigma(input signed[8] a, input unsigned[8] cnt, output signed[16] sum)
  {
    signed[16]  csum=0;
    unsigned[8] ccnt=0;
    state start(cnt):
      if (cnt==0 ) { sum=0; stay;}
      else         { ccnt=cnt; goto consume; }
    state consume(a):
      if (ccnt==1) {  sum=csum+a; goto start; }
      else         { csum=csum+a; ccnt=ccnt-1; stay; }
  }



// dynamic delay
 gcd(input signed[16] a, input signed[16]  b, output signed[16]  o)
  {
    signed[16] high=0;
    signed[16] low=0;
    state start(a,b):
      if (a==0) { o=b; stay;}
      else if (b==0) { o=a; stay;}
      else if (a==b) { o=a; stay;}
      else 
        { if (a>b) {high=a; low=b;} else {high=b; low=a;} 
          goto iter;
        }
    state iter():
     if (low==0) { o=high; goto start;}
     else {
            signed[16] tmp=high; 
            high=low; 
            low=tmp%low; 
            goto iter;
          }
  }

// switch
 switch(input signed[16] in, input boolean sel, output signed[16]  a, 
        output signed[16] b)
  {
    state start(sel,in):
      if (sel)  a=in;
      else  b=in;
  }




// select
 select(input signed[16]  a, input signed[16]  b, 
        input boolean sel, output signed[16] o)
  {
    state start(sel):
      if (sel) goto getA;
      else goto getB;
    state getA(a):
      {
       o=a;  
       goto start;
      }
    state getB(b):
      {
       o=b; 
       goto start;
      }
  }


// N.B. The preceding can be inefficient (minimal throughput of one
// output every two cycles) if implemented directly like the description
// above.  A more optimized implementation (which we might be able to derive
// automatically) would be:

// beter select
 select_v2(input signed[16]  a, input signed[16]  b, input boolean sel, 
           output signed[16]  o)
  {
    state start(sel):
      if (sel) goto getA;
      else goto getB;
    state getA(a,sel): // note two state clauses for getA
      {
       o=a; 
       if (sel) goto getA; else goto getB;
      }
    state getA(a):     // w/ different data availablility clauses
       { o=a; goto start; }
    state getB(b,sel):
       {
         o=b; 
        if (sel) goto getA; else goto getB;
       }
    state getB(b):
       { o=b; goto start; }
  }

