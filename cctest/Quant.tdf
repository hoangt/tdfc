//////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 1999 The Regents of the University of California 
// Permission to use, copy, modify, and distribute this software and
// its documentation for any purpose, without fee, and without a
// written agreement is hereby granted, provided that the above copyright 
// notice and this paragraph and the following two paragraphs appear in
// all copies. 
//
// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
// DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
// LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,
// EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. 
//
// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON
// AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
// PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS. 
//
//////////////////////////////////////////////////////////////////////////////
//

Quant(param unsigned[8] inWidth, param unsigned[15] max, 
      param unsigned[10] zerothresh,
      input signed[inWidth] a, output unsigned[5] q)

{

    unsigned[15] range;
    unsigned[5] ZERO_MARK = 30;

    state start(): 
      {
	  range = max-zerothresh;
	  goto process;
      }

    state process(a):
      {
	  signed[15] t0;
	  unsigned[15] val;
	  unsigned[15] final_val;
	  unsigned[15] clipped_val;
	  boolean sign;
	  unsigned[5] temp; 
	  unsigned[5] temp2; 
	  unsigned[20] t1;
	  
	  if (a < 0) 
	    {
	      t0 = -a; 
	      val = bitsof(t0); 
	      sign = true;
	    }
	  else 
	    {
	      val = bitsof(a); 
	      sign = false;
	    }
	  if (val > max) 
	    clipped_val = max;
	  else
	    clipped_val=val;
	  if (clipped_val < zerothresh) 
	    {q = ZERO_MARK;}
	  else 
	    { 
	      final_val = clipped_val - zerothresh;
	      t1 = final_val*16/range;
	      temp = t1%32;
	      if (temp > 14) 
		temp2 = 14;
	      else
		temp2=temp;
	      if (!sign) 
		q = temp2 + 15;
	      else 
		q = temp2;
	    }
	  stay;
      }

} 

