#!/bin/tcsh
#
# Generate tab-delimited (Excel compatible) summary report
#   for every "-pp1" page project in this directory,
#   for every implementation thereof,
#   compiling both its page composition and its behavioral operator
# Assume pages were generated by "tdfc -synplify -pp1",
#   so every base module <op> induces a page _page_<op>
# Use after synthesis  (synplify-all, synplify-pages-all)
#   and place-and-route (xilinx-all)
#
# Synplify 7.7
# Eylon Caspi, 10/16/03 9/29/04

set toolpath = ${0:h}

# set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -name _page_\* -print | perl -npe 's{.*/}{}; s{_qin$}{}; s{_q$}{}; s{_noin$}{}' | sort | uniq`
# set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -name \*_noin -print | perl -npe 's{.*/}{}; s{_noin$}{}'`
set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -print | perl -npe 's{_ior}{}' | sort | uniq | egrep '_noin$' | perl -npe 's{.*/}{}; s{_noin$}{}'`

echo "Xilinx results for:  ${cwd:h}"
echo `date`
echo ""
echo "Name\tComponent\tModule\tRevision\tSYN Clock (MHz)\tSYN LUT-FFs\tMAP Clock (MHz)\tPAR Clock (MHz)\tPAR LUT-FFs\tPAR/SYN Period\tPAR/SYN LUT-FFs\t"

foreach topmodule ($topmodules)
  set basemodule = ${topmodule:s/_page_//}
  set components = (fsm dp dpfsm qin q dpq noin top)
  set modules    = (${basemodule}_fsm ${basemodule}_dp ${basemodule}	\
		    ${topmodule}_qin ${topmodule}_q			\
		    ${topmodule}_dpq ${topmodule}_noin ${topmodule})
  foreach i (1 2 3 4 5 6 7 8)
    set component = ${components[$i]}
    set module    = ${modules[$i]}
    set moduleior = ${module}_ior
    if (-d $moduleior) \
      set module = $moduleior
    if (-d $module) then
      foreach revpath ($module/rev*)
        set rev = ${revpath:t}
	echo -n "${basemodule}\t${component}\t${module}\t${rev}\t"
	set syn_period_file = ${revpath}/PERIOD_SYNPLIFY
	set syn_lutffs_file = ${revpath}/LUTFFS_SYNPLIFY
	set map_period_file = ${revpath}/PERIOD_MAP
	set par_period_file = ${revpath}/PERIOD_PAR
	set par_slices_file = ${revpath}/SLICES_FLOORPLAN
	if (-f $syn_period_file) then
					set syn_period = `cat $syn_period_file`
				 else
					set syn_period = ""
				 endif
	if (-f $syn_lutffs_file) then
					set syn_lutffs = `cat $syn_lutffs_file`
				 else
					set syn_lutffs = ""
				 endif
	if (-f $map_period_file) then
					set map_period = `cat $map_period_file`
				 else
					set map_period = ""
				 endif
	if (-f $par_period_file) then
					set par_period = `cat $par_period_file`
				 else
					set par_period = ""
				 endif
	if (-f $par_slices_file) then
					set par_slices = `cat $par_slices_file`
				 else
					set par_slices = ""
				 endif
#	set tab   = '"\t"'
#	set tabnl = '"\t\n"'
#	perl -e "
#		 print 1000./$syn_period . $tab . $syn_lutffs   . $tab .  \
#		       1000./$map_period . $tab .			  \
#		       1000./$par_period . $tab . $par_slices*2 . $tab .  \
#		       $par_period/$syn_period                  . $tab .  \
#		       $par_slices*2/$syn_lutffs                . $tabnl"
	perl -e '$syn_period = $ARGV[0];				\
		 $syn_lutffs = $ARGV[1];				\
		 $map_period = $ARGV[2];				\
		 $par_period = $ARGV[3];				\
		 $par_slices = $ARGV[4];				\
		 # print "ARGV = {" . join(", ",@ARGV) . " }\n";	\
		 $syn_speed  = $syn_period ? 1000./$syn_period : "";	\
		 $map_speed  = $map_period ? 1000./$map_period : "";	\
		 $par_speed  = $par_period ? 1000./$par_period : "";	\
		 $par_lutffs = $par_slices ?     2*$par_slices : "";	\
		 $par_relper = $syn_period ? $par_period/$syn_period : ""; \
		 $par_rellut = $syn_lutffs ? $par_lutffs/$syn_lutffs : ""; \
		 print "$syn_speed\t$syn_lutffs\t" .			\
		       "$map_speed\t"              .			\
		       "$par_speed\t$par_lutffs\t" .			\
		       "$par_relper\t$par_rellut\t\n" '			\
	     "$syn_period" "$syn_lutffs" "$map_period"			\
	     "$par_period" "$par_slices"
      end
    endif
  end
end
