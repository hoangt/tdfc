#!/bin/tcsh
#
# Generate tab-delimited (Excel compatible) summary report
#   for every "-pp1" page project in this directory,
#   for every implementation thereof,
#   for every component thereof
# Assume pages were generated by "tdfc -synplify -pp1",
#   so every base module <op> induces a page _page_<op>
# If application is present, generated by "tdfc -synplify",
#   print only its top-level composition
# Use after synthesis  (synplify-all, synplify-pages-all)
#   and place-and-route (xilinx-all)
#
# Synplify 7.7
# Eylon Caspi, 10/16/03 9/29/04

set toolpath = ${0:h}

# set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -name _page_\* -print | perl -npe 's{.*/}{}; s{_qin$}{}; s{_q$}{}; s{_noin$}{}' | sort | uniq`
# set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -name \*_noin -print | perl -npe 's{.*/}{}; s{_noin$}{}'`
# set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -print | perl -npe 's{_ior}{}' | sort | uniq | egrep '_noin$' | perl -npe 's{.*/}{}; s{_noin$}{}'`

# if ($#topmodules == 0) then
#   # - if cannot find "_noin" modules, then take ALL modules as top
#   set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -print | perl -npe 's{_ior}{}' | sort | uniq | perl -npe 's{.*/}{}'`
# endif

# Module list
#  - derived from Xilinx project directories (appl = all minus pages)
#  - strip _ior suffix
#  - ignore appl-level extras (%_q %_qin %_noin, %_dpq)
set  raw_modules = `find . -maxdepth 1 -mindepth 1 -type d -name \*_ior -print | perl -npe 's{.*/}{}; s{_ior$}{}'`
#set raw_behavs  = `echo ${raw_modules}     | tr ' ' '\n' | egrep '^_page_.*_noin' | perl -npe 's{^_page_(.*)_noin}{$1}'`
set  raw_behavs  = `echo ${raw_modules}     | tr ' ' '\n' | egrep '^.*_fsm'        | perl -npe 's{^(.*)_fsm}{$1}'`
set  raw_pattern = `echo ${raw_behavs}      | tr ' ' '|'`
if ($#raw_pattern > 0) then
set  topmodules_appl = `echo ${raw_modules} | tr ' ' '\n' | egrep -v "${raw_pattern}"`
else
set  topmodules_appl = (${raw_modules})
endif
set  topmodules_page = `echo ${raw_behavs}  | tr ' ' '\n' | perl -npe 's{^(.+)$}{_page_$1}'`
set  topmodules      = (${topmodules_appl} ${topmodules_page})

# echo raw_modules = \"${raw_modules}\"
# echo raw_behavs  = \"${raw_behavs}\"
# echo raw_pattern = \"${raw_pattern}\"
# echo topmodules_appl = \"${topmodules_appl}\"
# echo topmodules_page = \"${topmodules_page}\"
# echo topmodules      = \"${topmodules}\"

# - split $topmodules into application and pages
set topmodules_appl = `echo $topmodules | tr ' ' '\n' | egrep -v '^_page_'`
set topmodules_page = `echo $topmodules | tr ' ' '\n' | egrep    '^_page_'`

echo "Xilinx results for:  ${cwd:h}"
echo `date`
echo ""
echo "Name\tComponent\tModule\tRevision\tSYN Clock (MHz)\tSYN LUT-FFs\tSYN %Route\tSYN Time (secs)\tSYN Time No-FSM-Explorer (secs)\tMAXCOMPACT Clock (MHz)\tMAXCOMPACT LUT-FFs\tMAXCOMPACT %Route\tMAP Clock (MHz)\tMAP LUT-FFs\tMAP %Route\tMAP Expansions\tPAR Clock (MHz)\tPAR LUT-FFs\tPAR %Route\tPAR Expansions\tP Time (secs)\tR Time (secs)\tPAR Time (secs)\tPAR Time Max (secs)\tPAR Time Cumu (secs)\tPAR/SYN Period\tPAR/SYN LUT-FFs\tPAR/SYN %Route\t"

foreach topmodule ($topmodules_appl $topmodules_page)
  if ($topmodule == "$topmodules_appl") then
    set basemodule = ${topmodule}
    set components = (appl)
    set modules    = (${topmodule})
    set indexes    = (1)
  else
    set basemodule = ${topmodule:s/_page_//}
    set components = (fsm dp dpfsm qin q dpq noin top)
    set modules    = (${basemodule}_fsm ${basemodule}_dp ${basemodule}	\
		      ${topmodule}_qin ${topmodule}_q			\
		      ${topmodule}_dpq ${topmodule}_noin ${topmodule})
    set indexes    = (1 2 3 4 5 6 7 8)
  endif
  foreach i ($indexes)
    set component = ${components[$i]}
    set module    = ${modules[$i]}
    set moduleior = ${module}_ior
    if (-d $moduleior) \
      set module = $moduleior
    if (-d $module) then
      foreach revpath ($module/rev*)
        set rev = ${revpath:t}
	echo -n "${basemodule}\t${component}\t${module}\t${rev}\t"
	set syn_period_file     = ${revpath}/PERIOD_SYNPLIFY
	set syn_lutffs_file     = ${revpath}/LUTFFS_SYNPLIFY
	set syn_routefrac_file  = ${revpath}/ROUTEFRAC_SYNPLIFY
	set syn_time_file       = ${revpath}/TIME_SYNPLIFY
	set syn_timenofsm_file  = ${revpath}/TIME_SYNPLIFY_NOFSMEXPLORER
	set mxc_period_file     = ${revpath}/PERIOD_MAXCOMPACT
	set mxc_slices_file     = ${revpath}/SLICES_MAXCOMPACT
	set mxc_routefrac_file  = ${revpath}/ROUTEFRAC_MAXCOMPACT
	set map_period_file     = ${revpath}/PERIOD_MAP
	set map_slices_file     = ${revpath}/SLICES_MAP
	set map_routefrac_file  = ${revpath}/ROUTEFRAC_MAP
	set map_expansions_file = ${revpath}/EXPANSIONS_MAP
	set par_period_file     = ${revpath}/PERIOD_PAR
	set par_slices_file     = ${revpath}/SLICES_FLOORPLAN
	set par_routefrac_file  = ${revpath}/ROUTEFRAC_PAR
	set par_expansions_file = ${revpath}/EXPANSIONS_PAR
	set p_time_file         = ${revpath}/TIME_P
	set par_time_file       = ${revpath}/TIME_PAR
	set par_timemax_file    = ${revpath}/TIME_PAR_MAX
	set par_timecumu_file   = ${revpath}/TIME_PAR_CUMU
	if (-f $syn_period_file) then
					set syn_period    = `cat $syn_period_file`
				 else
					set syn_period    = ""
				 endif
	if (-f $syn_lutffs_file) then
					set syn_lutffs    = `cat $syn_lutffs_file`
				 else
					set syn_lutffs    = ""
				 endif
	if (-f $syn_routefrac_file) then
					set syn_routefrac = `cat $syn_routefrac_file | tr -d '%'`
				 else
					set syn_routefrac = ""
				 endif
	if (-f $syn_time_file)   then
					set syn_time      = `cat $syn_time_file`
				 else
					set syn_time      = ""
				 endif
	if (-f $syn_timenofsm_file) then
					set syn_timenofsm = `cat $syn_timenofsm_file`
				 else
					set syn_timenofsm = ""
				 endif
	if (-f $mxc_period_file) then
					set mxc_period    = `cat $mxc_period_file`
				 else
					set mxc_period    = ""
				 endif
	if (-f $mxc_slices_file) then
					set mxc_slices    = `cat $mxc_slices_file`
				 else
					set mxc_slices    = ""
				 endif
	if (-f $mxc_routefrac_file) then
					set mxc_routefrac = `cat $mxc_routefrac_file | tr -d '%'`
				 else
					set mxc_routefrac = ""
				 endif
	if (-f $map_period_file) then
					set map_period    = `cat $map_period_file`
				 else
					set map_period    = ""
				 endif
	if (-f $map_slices_file) then
					set map_slices    = `cat $map_slices_file`
				 else
					set map_slices    = ""
				 endif
	if (-f $map_routefrac_file) then
					set map_routefrac = `cat $map_routefrac_file | tr -d '%'`
				 else
					set map_routefrac = ""
				 endif
	if (-f $map_expansions_file) then
					set map_expansions = `cat $map_expansions_file | tr -d '%'`
				 else
					set map_expansions = ""
				 endif
	if (-f $par_period_file) then
					set par_period    = `cat $par_period_file`
				 else
					set par_period    = ""
				 endif
	if (-f $par_slices_file) then
					set par_slices    = `cat $par_slices_file`
				 else
					set par_slices    = ""
				 endif
	if (-f $par_routefrac_file) then
					set par_routefrac = `cat $par_routefrac_file | tr -d '%'`
				 else
					set par_routefrac = ""
				 endif
	if (-f $par_expansions_file) then
					set par_expansions = `cat $par_expansions_file | tr -d '%'`
				 else
					set par_expansions = ""
				 endif
	if (-f $p_time_file)     then
					set p_time        = `cat $p_time_file`
				 else
					set p_time        = ""
				 endif
	if (-f $par_time_file)   then
					set par_time      = `cat $par_time_file`
				 else
					set par_time      = ""
				 endif
	if (-f $par_timemax_file) then
					set par_timemax   = `cat $par_timemax_file`
				 else
					set par_timemax   = ""
				 endif
	if (-f $par_timecumu_file) then
					set par_timecumu  = `cat $par_timecumu_file`
				 else
					set par_timecumu  = ""
				 endif
#	set tab   = '"\t"'
#	set tabnl = '"\t\n"'
#	perl -e "
#		 print 1000./$syn_period . $tab . $syn_lutffs   . $tab .  \
#		       1000./$map_period . $tab .			  \
#		       1000./$par_period . $tab . $par_slices*2 . $tab .  \
#		       $par_period/$syn_period                  . $tab .  \
#		       $par_slices*2/$syn_lutffs                . $tabnl"
	perl -e '$syn_period     = $ARGV[0];				\
		 $syn_lutffs     = $ARGV[1];				\
		 $syn_routefrac  = $ARGV[2];				\
		 $syn_time       = $ARGV[3];				\
		 $syn_timenofsm  = $ARGV[4];				\
		 $mxc_period     = $ARGV[5];				\
		 $mxc_slices     = $ARGV[6];				\
		 $mxc_routefrac  = $ARGV[7];				\
		 $map_period     = $ARGV[8];				\
		 $map_slices     = $ARGV[9];				\
		 $map_routefrac  = $ARGV[10];				\
		 $map_expansions = $ARGV[11];				\
		 $par_period     = $ARGV[12];				\
		 $par_slices     = $ARGV[13];				\
		 $par_routefrac  = $ARGV[14];				\
		 $par_expansions = $ARGV[15];				\
		 $p_time         = $ARGV[16];				\
		 $par_time       = $ARGV[17];				\
		 $par_timemax    = $ARGV[18];				\
		 $par_timecumu   = $ARGV[19];				\
		 # print "ARGV = {" . join(", ",@ARGV) . " }\n";	\
		 $syn_speed  = $syn_period ? 1000./$syn_period : "";	\
		 $mxc_speed  = $mxc_period ? 1000./$mxc_period : "";	\
		 $map_speed  = $map_period ? 1000./$map_period : "";	\
		 $par_speed  = $par_period ? 1000./$par_period : "";	\
		 $mxc_lutffs = $mxc_slices ?     2*$mxc_slices : "";	\
		 $map_lutffs = $map_slices ?     2*$map_slices : "";	\
		 $par_lutffs = $par_slices ?     2*$par_slices : "";	\
		 $r_time     = ($par_time && $p_time) ? $par_time-$p_time          : ""; \
		 $par_relper = ($syn_period   !=0) ? $par_period   /$syn_period    : ""; \
		 $par_rellut = ($syn_lutffs   !=0) ? $par_lutffs   /$syn_lutffs    : ""; \
		 $par_relrtf = ($syn_routefrac!=0) ? $par_routefrac/$syn_routefrac : ""; \
		 if ($syn_routefrac) { $syn_routefrac = $syn_routefrac . "%" } \
		 if ($mxc_routefrac) { $mxc_routefrac = $mxc_routefrac . "%" } \
		 if ($map_routefrac) { $map_routefrac = $map_routefrac . "%" } \
		 if ($par_routefrac) { $par_routefrac = $par_routefrac . "%" } \
		 print "$syn_speed\t$syn_lutffs\t$syn_routefrac\t"			 . \
		       "$syn_time\t$syn_timenofsm\t"					 . \
		       "$mxc_speed\t$mxc_lutffs\t$mxc_routefrac\t"			 . \
		       "$map_speed\t$map_lutffs\t$map_routefrac\t" . "$map_expansions\t" . \
		       "$par_speed\t$par_lutffs\t$par_routefrac\t" . "$par_expansions\t" . \
		       "$p_time\t$r_time\t$par_time\t$par_timemax\t$par_timecumu\t"	 . \
		       "$par_relper\t$par_rellut\t$par_relrtf\t\n" '			   \
	     "$syn_period" "$syn_lutffs" "$syn_routefrac"		    \
	     "$syn_time"   "$syn_timenofsm"				    \
	     "$mxc_period" "$mxc_slices" "$mxc_routefrac"		    \
	     "$map_period" "$map_slices" "$map_routefrac" "$map_expansions" \
	     "$par_period" "$par_slices" "$par_routefrac" "$par_expansions" \
	     "$p_time"     "$par_time"   "$par_timemax"   "$par_timecumu"
      end
    endif
  end
end
