#!/bin/csh
#
# Generate tab-delimited (Excel compatible) summary report
#   for every "-pp1" page project in this directory,
#   for every implementation thereof,
#   compiling both its page composition and its behavioral operator
# Assume pages were generated by "tdfc -synplify -pp1",
#   so every base module <op> induces a page _page_<op>
# Use after synthesis (xilinx-pp1-all-multiproc)
# Report format:  (areas 0.8 0.9 1.0 1.1 1.2)
#
#                  synplify       rev_area_0.8    ...    rev_area_1.2
#                  speed area     speed area      ...    speed area
# basemodule       .     .        .     .         ...    .     .
# basemodule_fsm   .     .        .     .         ...    .     .
# basemodule_dp    .     .        .     .         ...    .     .
# pagemodule_noin  .     .        .     .         ...    .     .
# pagemodule_q     .     .        .     .         ...    .     .
# pagemodule_qin   .     .        .     .         ...    .     .
# pagemodule       .     .        .     .         ...    .     .
# ...
#
# Note:  Synplify area is logic estimate, before PAR.
#        Xilinx   area is expanded area in the floorplan, not just logic.
#	 We do NOT report Xilinx area for logic + route-thru,
#	   which may be slightly smaller than the 1.0x floorplanned area
#
# Synplify 7.1
# Xilinx ISE 5.2i
# Eylon Caspi, 10/16/03

# set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -name _page_\* -print | perl -npe 's{.*/}{}; s{_qin$}{}; s{_q$}{}; s{_noin$}{}' | sort | uniq`
set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -name \*_noin -print | perl -npe 's{.*/}{}; s{_noin$}{}'`

echo "Synthesis results for:  ${cwd:h}"
echo `date`
echo ""
echo "	synplify_speed		rev_area_0.8		rev_area_0.9		rev_area_1.0		rev_area_1.1		rev_area_1.2		"
repeat 6 \
  echo -n "	Speed	Area"
echo "	"
repeat 6 \
  echo -n "	(MHz)	(LUTs)"
echo "	"

foreach topmodule ($topmodules)

# set modules = (${topmodule}_qin ${topmodule}_q ${topmodule}_noin ${topmodule})
  set modules = ${topmodule}
  if (-d ${topmodule}_noin)   set modules = (${topmodule}_noin $modules)
  if (-d ${topmodule}_q)      set modules = (${topmodule}_q    $modules)
  if (-d ${topmodule}_qin)    set modules = (${topmodule}_qin  $modules)
  set basemodule = ${topmodule:s/_page_//}
  if ($basemodule != $topmodule) then
    if (-d ${basemodule})     set modules = (${basemodule}     $modules)
    if (-d ${basemodule}_fsm) set modules = (${basemodule}_fsm $modules)
    if (-d ${basemodule}_dp)  set modules = (${basemodule}_dp  $modules)
  endif

  foreach module ($modules)
    echo -n "$module"

    set syn_file  = "../proj/$module/rev_1__speed/$module.srr"
    if (-r ${syn_file}) then
      perl -e 'foreach (<>) {						\
		 if (/^(clock|system) +(\d+(.\d+)?) MHz +(\d+(.\d)?)/i)	\
		   { if ($speed==0 || $speed>$4) { $speed=$4; } }	\
		 if (/^Total +LUTs: (\d+)/i)				\
		   { if ($area==0  || $area<$1)  { $area=$1;  } }	\
	       }							\
	       print "\t$speed\t$area" ' $syn_file
    else
      perl -e 'print "\t\t"'
    endif

    foreach revpath ($module/rev*)
      set rev = ${revpath:t}

      set speed_file = "${revpath}/${module}.twr"
      if (-r ${speed_file}) then
	perl -e 'foreach (<>) {						    \
		   if (/(Minimum\s+period|Maximum\s+path\s+delay).*:\s+(\d+(\.\d+)?)ns/i) \
		     { if ($delay==0 || $delay<$2) { $delay=$2 } }	    \
		 }							    \
		 $speed = ($delay>0) ? sprintf("%.3f", 1000.0/$delay) : "E"; \
		 print "\t$speed" ' $speed_file
#	perl -e 'foreach (<>) {						\
#		   if (/Maximum\s+frequency:\s+(\d+(\.\d+)?)/i)		\
#		     { if (speed==0 || $speed>$1) { $speed=$1 } }	\
#		 }							\
#		 print "\t$speed" ' $speed_file
      else
        perl -e 'print "\t"'
      endif

#     set area_file = "${revpath}/${module}_map.mrp"
      set area_file = "${revpath}/constraints.ucf"
      if (-r ${area_file}) then
	perl -ne 'if (/RANGE = SLICE_X0Y0\:SLICE_X(\d+)Y(\d+)/) {	\
		    $area = ($1+1)*($2+1)*2;				\
		    print "\t$area";					\
		  } ' $area_file
#	perl -e 'foreach (<>) {						\
#		   if (/Total\s+Number\s+4\s+input\s+LUTs:\s+(\d+)/i)	\
#		     { if ($area==0 || $area<$1) { $area=$1 } }		\
#		 }							\
#		 print "\t$area" ' $area_file
      else
        perl -e 'print "\t"'
      endif

    end
    echo ""
  end
end
