#!/bin/csh
#
# Generate HTML summary report
#   for every "-pp1" page project in this directory,
#   for every implementation thereof,
#   for both its page composition and its behavioral operator,
# Report Xilinx results for register shell module, if available,
#   instead of for core module
# Assume pages were generated by "tdfc -synplify -pp1",
#   so every base module <op> induces a page _page_<op>
# Use after synthesis (xilinx-pp1-all-multiproc)
# Report format:  (areas 1.0 1.1 1.2 1.5 2.0 unconstrained)
#
#                  synplify            rev_area_1.0    ...    rev_area_unconstr
#                  speed area regs     speed area      ...    speed area
# basemodule       .     .    .        .     .         ...    .     .
# basemodule_fsm   .     .    .        .     .         ...    .     .
# basemodule_dp    .     .    .        .     .         ...    .     .
# pagemodule_noin  .     .    .        .     .         ...    .     .
# pagemodule_q     .     .    .        .     .         ...    .     .
# pagemodule_qin   .     .    .        .     .         ...    .     .
# pagemodule       .     .    .        .     .         ...    .     .
# ...
#
# Note:  Synplify area is logic estimate, before PAR.
#        Xilinx   area is expanded area in the floorplan, not just logic.
#	 We do NOT report Xilinx area for logic + route-thru,
#	   which may be slightly smaller than the 1.0x floorplanned area
#
# Synplify 7.1
# Xilinx ISE 6.1i
# Eylon Caspi, 2/12/03

set bgcolor = "#bbbbff"			# HTML dark color for table border

# set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -name _page_\* -print | perl -npe 's{.*/}{}; s{_qin$}{}; s{_q$}{}; s{_noin$}{}' | sort | uniq`
set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -name \*_noin -print | perl -npe 's{.*/}{}; s{_noin$}{}'`

set verilogpath   = ${cwd:h}		# CWD minus trailing "/proj"
set verilogmodule = ${verilogpath:t}	# tail of $verilogpath

echo "<html>"
echo "<head>"
echo "<title>Xilinx $verilogmodule</title>"
echo "</head>"
echo "<body>"
echo "<h3>Synthesis results for:  $verilogpath</h3>"
echo "Synplify Pro 7.1<br>"
echo "Xilinx ISE 6.1i<br>"
echo "Target:  XC2V1000, speed grade -6<br>"
echo "`date`<br>"
echo "<br>"

echo "<table border=0>"
echo "<tr><td><b>Synplify:   </b>&nbsp;</td>"
echo "    <td>Synplify only (no PAR), mapped for speed</td></tr>"
echo "<tr><td><b>Area x 1.0: </b>&nbsp;</td>"
echo "    <td>Xilinx PAR, area constrained to smallest box possible (''min'')</td></tr>"
echo "<tr><td><b>Area x 1.1: </b>&nbsp;</td>"
echo "    <td>Xilinx PAR, area constrained to smallest box around 1.1 x min</td></tr>"
echo "<tr><td><b>Area x 1.2: </b>&nbsp;</td>"
echo "    <td>Xilinx PAR, area constrained to smallest box around 1.2 x min</td></tr>"
echo "<tr><td><b>Area x 1.5: </b>&nbsp;</td>"
echo "    <td>Xilinx PAR, area constrained to smallest box around 1.5 x min</td></tr>"
echo "<tr><td><b>Area x 2.0: </b>&nbsp;</td>"
echo "    <td>Xilinx PAR, area constrained to smallest box around 2.0 x min</td></tr>"
echo "<tr><td><b>Area Unconstrained: </b>&nbsp;</td>"
echo "    <td>Xilinx PAR, area not constrained (area shown is 2x occupied slices, not floorplan)</td></tr>"
echo "</table>"
echo "<br>"

echo "<table border=0 cellpadding=2>"
echo "<tr><td colspan=25 bgcolor=$bgcolor> </td></tr>"		# --------
echo "<tr bgcolor=$bgcolor>"
echo "    <td rowspan=1000 bgcolor=$bgcolor> </td>"		# ||||||||
echo "    <td rowspan=2 align=center><b>Module</b></td>"
echo "    <td rowspan=1000 bgcolor=$bgcolor> </td>"		# ||||||||
echo "    <td colspan=3 align=center><b>Synplify</b></td>"
echo "    <td rowspan=1000 bgcolor=$bgcolor> </td>"		# ||||||||
echo "    <td colspan=2 align=center><b>Area x 1.0</b></td>"
echo "    <td rowspan=1000 bgcolor=$bgcolor> </td>"		# ||||||||
echo "    <td colspan=2 align=center><b>Area x 1.1</b></td>"
echo "    <td rowspan=1000 bgcolor=$bgcolor> </td>"		# ||||||||
echo "    <td colspan=2 align=center><b>Area x 1.2</b></td>"
echo "    <td rowspan=1000 bgcolor=$bgcolor> </td>"		# ||||||||
echo "    <td colspan=2 align=center><b>Area x 1.5</b></td>"
echo "    <td rowspan=1000 bgcolor=$bgcolor> </td>"		# ||||||||
echo "    <td colspan=2 align=center><b>Area x 2.0</b></td>"
echo "    <td rowspan=1000 bgcolor=$bgcolor> </td>"		# ||||||||
echo "    <td colspan=2 align=center><b>Area Unconstrained</b></td>"
echo "    <td rowspan=1000 bgcolor=$bgcolor> </td>"		# ||||||||
echo "</tr>"
echo "<tr bgcolor=$bgcolor>"
echo "    <td align=center><b>Speed<br>(MHz)</b></td>" \
        " <td align=center><b>Area<br>(LUTs)</b></td>" \
        " <td align=center><b>Regs<br>&nbsp;</b></td>"
repeat 6 \
  echo "    <td align=center><b>Speed<br>(MHz)</b></td>" \
          " <td align=center><b>Area<br>(LUTs)</b></td>"
echo "</tr>"

foreach topmodule (${topmodules})

# set modules = (${topmodule}_qin ${topmodule}_q ${topmodule}_noin ${topmodule})
  set modules = ${topmodule}
  if (-d ${topmodule}_noin)   set modules = (${topmodule}_noin $modules)
  if (-d ${topmodule}_q)      set modules = (${topmodule}_q    $modules)
  if (-d ${topmodule}_qin)    set modules = (${topmodule}_qin  $modules)
  set basemodule = ${topmodule:s/_page_//}
  if ($basemodule != $topmodule) then
    if (-d ${basemodule})     set modules = (${basemodule}     $modules)
    if (-d ${basemodule}_fsm) set modules = (${basemodule}_fsm $modules)
    if (-d ${basemodule}_dp)  set modules = (${basemodule}_dp  $modules)
  endif

  echo "<tr><td colspan=23 bgcolor=$bgcolor> </td></tr>"	# --------

  foreach module (${modules})
    echo "<tr>"
    echo "    <td>$module</td>"

    set syn_file  = "../proj/$module/rev_1__speed/$module.srr"
    if (-r ${syn_file}) then
      perl -e 'foreach (<>) {						\
		 if (/^(clock|system) +(\d+(.\d+)?) MHz +(\d+(.\d)?)/i)	\
		   { if ($speed==0 || $speed>$4) { $speed=$4; } }	\
		 if (/^Total +LUTs: (\d+)/i)				\
		   { if ($area==0  || $area<$1)  { $area=$1;  } }	\
		 if (/^Register bits not including I\/Os: +(\d+)/i)     \
		   { if ($regs==0 || $regs<$1)  { $regs = $1 } }        \
	       }							\
	       print "    <td align=right>$speed</td>";			\
	       print   "  <td align=right>$area</td>";			\
	       print   "  <td align=right>$regs</td>\n"; ' $syn_file
    else
      perl -e 'print "    <td align=right></td>";			\
	       print   "  <td align=right></td>";			\
	       print   "  <td align=right></td>\n";'
    endif

    # - Report Xilinx PAR results on register shell, if avail., else on module
    if (-d ${module}_ior) then
      set xilinx_module = ${module}_ior
    else
      set xilinx_module = ${module}
    endif

    set nonomatch
#   foreach revpath (${xilinx_module}/rev*)
    foreach revname ( 1.0 1.1 1.2 1.5 2.0 unconstrained )
      set revpath = "${xilinx_module}/rev_area_${revname}"
      set rev     = ${revpath:t}

      set speed_file = "${revpath}/PERIOD_PAR"
      if (-r ${speed_file}) then
        perl -ne 'chomp;  $speed=sprintf("%.3f",1000./$_);		\
		  print "    <td align=right>$speed</td>" '  $speed_file
      else
        perl -e  'print "    <td align=right></td>" '
      endif

      if (${revname} == "unconstrained") then
        set area_file = "${revpath}/SLICES_MAP"
      else
        set area_file = "${revpath}/SLICES_FLOORPLAN"
      endif
      if (-r ${area_file}) then
	perl -ne 'chomp;  $area=$_*2;					\
		  print "  <td align=right>$area</td>\n" '  $area_file
      else
        perl -e  'print "  <td align=right></td>\n" '
      endif

    end
    echo "</tr>"
  end
end

echo "<tr><td colspan=23 bgcolor=$bgcolor> </td></tr>"		# --------
echo "</table>"
echo "</body>"
echo "</html>"
