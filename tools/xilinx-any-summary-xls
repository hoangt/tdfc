#!/bin/csh
#
# Generate tab-delimited (Excel compatible) summary report
#   for every project in this directory,
#   for every implementation thereof,
# Use after synthesis (xilinx-pp1-all-multiproc or other)
# Report format:  (areas 1.0 1.1 1.2 1.5 2.0 unconstrained)
#
#                  synplify            rev_area_1.0    ...    rev_area_unconstr
#                  speed area regs     speed area      ...    speed area
# basemodule       .     .    .        .     .         ...    .     .
# basemodule_fsm   .     .    .        .     .         ...    .     .
# basemodule_dp    .     .    .        .     .         ...    .     .
# pagemodule_noin  .     .    .        .     .         ...    .     .
# pagemodule_q     .     .    .        .     .         ...    .     .
# pagemodule_qin   .     .    .        .     .         ...    .     .
# pagemodule       .     .    .        .     .         ...    .     .
# ...
#
# Note:  Synplify area is logic estimate, before PAR.
#        Xilinx   area is expanded area in the floorplan, not just logic.
#	 We do NOT report Xilinx area for logic + route-thru,
#	   which may be slightly smaller than the 1.0x floorplanned area
#
# Synplify 7.1
# Xilinx ISE 6.1i
# Eylon Caspi, 2/12/03

# set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -name _page_\* -print | perl -npe 's{.*/}{}; s{_qin$}{}; s{_q$}{}; s{_noin$}{}' | sort | uniq`
# set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -name \*_noin -print | perl -npe 's{.*/}{}; s{_noin$}{}'`
set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -print | perl -npe 's{.*/}{}'`

echo "Synthesis results for:  ${cwd:h}"
echo `date`
echo ""
echo "	synplify_speed			rev_area_1.0		rev_area_1.1		rev_area_1.2		rev_area_1.5		rev_area_2.0		rev_area_unconstrained		"
echo -n "	Speed	Area	Regs"
repeat 6 \
  echo -n "	Speed	Area"
echo "	"
echo -n "	(MHz)	(LUTs)	"
repeat 6 \
  echo -n "	(MHz)	(LUTs)"
echo "	"

foreach topmodule ($topmodules)

# set modules = (${topmodule}_qin ${topmodule}_q ${topmodule}_noin ${topmodule})
  set modules = ${topmodule}
  # if (-d ${topmodule}_noin)   set modules = (${topmodule}_noin $modules)
  # if (-d ${topmodule}_q)      set modules = (${topmodule}_q    $modules)
  # if (-d ${topmodule}_qin)    set modules = (${topmodule}_qin  $modules)
  # set basemodule = ${topmodule:s/_page_//}
  # if ($basemodule != $topmodule) then
  #   if (-d ${basemodule})     set modules = (${basemodule}     $modules)
  #   if (-d ${basemodule}_fsm) set modules = (${basemodule}_fsm $modules)
  #   if (-d ${basemodule}_dp)  set modules = (${basemodule}_dp  $modules)
  # endif

  foreach module ($modules)
    echo -n "$module"

    set syn_file  = "../proj/$module/rev_1__speed/$module.srr"
    if (-r ${syn_file}) then
      perl -e 'foreach (<>) {						\
		 if (/^(clock|system) +(\d+(.\d+)?) MHz +(\d+(.\d)?)/i)	\
		   { if ($speed==0 || $speed>$4) { $speed=$4; } }	\
		 if (/^Total +LUTs: (\d+)/i)				\
		   { if ($area==0  || $area<$1)  { $area=$1;  } }	\
		 if (/^Register bits not including I\/Os: +(\d+)/i)     \
		   { if ($regs==0 || $regs<$1)  { $regs = $1 } }        \
	       }							\
	       print "\t$speed\t$area\t$regs" ' $syn_file
    else
      perl -e 'print "\t\t\t"'
    endif


    set nonomatch
#   foreach revpath (${module}/rev*)
    foreach revname ( 1.0 1.1 1.2 1.5 2.0 unconstrained )
      set revpath = "${module}/rev_area_${revname}"
      set rev = ${revpath:t}

      set speed_file = "${revpath}/PERIOD_PAR"
      if (-r ${speed_file}) then
        perl -ne 'chomp;  $speed=1000./$_;				\
		  print "\t$speed" '  $speed_file
      else
        perl -e  'print "\t" '
      endif

      if (${revname} == "unconstrained") then
        set area_file = "${revpath}/SLICES_MAP"
      else
        set area_file = "${revpath}/SLICES_FLOORPLAN"
      endif
      if (-r ${area_file}) then
	perl -ne 'chomp;  $area=$_*2;					\
		  print "\t$area" '  $area_file
      else
        perl -e  'print "\t" '
      endif

    end
    echo ""
  end
end
