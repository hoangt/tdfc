#!/bin/csh
#
# Generate HTML summary report
#   for every "-pp1" page project in this directory,
#   for every implementation thereof,
#   compiling both its page composition and its behavioral operator
# Assume pages were generated by "tdfc -synplify -pp1",
#   so every base module <op> induces a page _page_<op>
# Use after synthesis (synplify-pp1-all-multiproc)
# Report format:
#
#                   rev_1__speed        rev_2__area         rev_3__no_optim
#                   speed area style    speed area style    speed area style  
# basemodule        .     .    .        .     .    .        .     .    .
# basemodule_fsm    .     .    .        .     .    .        .     .    .
# basemodule_dp     .     .    .        .     .    .        .     .    .
# pagemodule_noin   .     .    .        .     .    .        .     .    .
# pagemodule_q      .     .    .        .     .    .        .     .    .
# pagemodule_qin    .     .    .        .     .    .        .     .    .
# pagemodule        .     .    .        .     .    .        .     .    .
# ...
#
# Synplify 7.1
# Eylon Caspi, 10/16/03

set bgcolor = "#bbbbff"			# HTML dark color for table border

# set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -name _page_\* -print | perl -npe 's{.*/}{}; s{_qin$}{}; s{_q$}{}; s{_noin$}{}' | sort | uniq`
set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -name \*_noin -print | perl -npe 's{.*/}{}; s{_noin$}{}'`

set verilogpath   = ${cwd:h}		# CWD minus trailing "/proj"
set verilogmodule = ${verilogpath:t}	# tail of $verilogpath

echo "<html>"
echo "<head>"
echo "<title>Synplify $verilogmodule</title>"
echo "</head>"
echo "<body>"
echo "<h3>Synthesis results for:  $verilogpath</h3>"
echo "Synplify Pro 7.1<br>"
echo "Target:  XC2V40, speed grade -6<br>"
echo "`date`<br>"
echo "<br>"

echo "<table border=0>"
echo "<tr><td><b>Map for Speed:</b> </td>"
echo "    <td>FSM compiler, FSM explorer, resource sharing, retiming, pipelining, 500MHz</td></tr>"
echo "<tr><td><b>Map for Area:</b> </td>"
echo "    <td>FSM compiler, FSM explorer, resource sharing, retiming, pipelining</td></tr>"
echo "<tr><td><b>No Optimizations:</b> </td>"
echo "    <td>(none)</td></tr>"
echo "</table>"
echo "<br>"

echo "<table border=0 cellpadding=2>"
echo "<tr><td colspan=15 bgcolor=$bgcolor> </td></tr>"		# --------
echo "<tr bgcolor=$bgcolor>"
echo "    <td rowspan=1000 bgcolor=$bgcolor> </td>"		# ||||||||
echo "    <td rowspan=2 align=center><b>Module</b></td>"
echo "    <td rowspan=1000 bgcolor=$bgcolor> </td>"		# ||||||||
echo "    <td colspan=3 align=center><b>Map for Speed</b></td>"
echo "    <td rowspan=1000 bgcolor=$bgcolor> </td>"		# ||||||||
echo "    <td colspan=3 align=center><b>Map for Area</b></td>"
echo "    <td rowspan=1000 bgcolor=$bgcolor> </td>"		# ||||||||
echo "    <td colspan=3 align=center><b>No Optimizations</b></td>"
echo "    <td rowspan=1000 bgcolor=$bgcolor> </td>"		# ||||||||
echo "</tr>"
echo "<tr bgcolor=$bgcolor>"
repeat 3 \
  echo "    <td align=center><b>Speed<br>(MHz)</b></td>" \
          " <td align=center><b>Area<br>(LUTs)</b></td>" \
          " <td align=center><b>FSM<br>Style</b></td>"
echo "</tr>"

foreach topmodule ($topmodules)
# set modules = (${topmodule}_qin ${topmodule}_q ${topmodule}_noin ${topmodule})
  set modules = ${topmodule}
  if (-d ${topmodule}_noin)   set modules = (${topmodule}_noin $modules)
  if (-d ${topmodule}_q)      set modules = (${topmodule}_q    $modules)
  if (-d ${topmodule}_qin)    set modules = (${topmodule}_qin  $modules)
  set basemodule = ${topmodule:s/_page_//}
  if ($basemodule != $topmodule) then
    if (-d ${basemodule})     set modules = (${basemodule}     $modules)
    if (-d ${basemodule}_fsm) set modules = (${basemodule}_fsm $modules)
    if (-d ${basemodule}_dp)  set modules = (${basemodule}_dp  $modules)
  endif
  echo "<tr><td colspan=13 bgcolor=$bgcolor> </td></tr>"	# --------
  foreach module ($modules)
    echo "<tr>"
    echo "    <td>$module</td>"
    foreach revpath ($module/rev*)
      set rev = ${revpath:t}
      set srrfile = ${revpath}/${module}.srr
      if (-f $srrfile) then
        perl -e 'foreach (<>) {                                              \
		   if (/^(clock|system) +(\d+(.\d+)) MHz +(\d+(.\d+)) MHz/i) \
		     { if ($speed==0 || $speed>$4) { $speed=$4; } }          \
		   if (/^Adding property syn_encoding, value "([^"]+)"/i)    \
		     { $fsmstyle = $1; }                                     \
		   if (/^Total +LUTs: (\d+)/i)                               \
		     { $area = $1 }                                          \
                }                                                            \
	        print "    <td align=right>$speed</td>",                     \
                        "  <td align=right>$area</td>",                      \
		        "  <td align=center>$fsmstyle</td>\n"'               \
                $srrfile
      endif
    end
    echo "</tr>"
  end
end

echo "<tr><td colspan=13 bgcolor=$bgcolor> </td></tr>"		# --------
echo "</table>"
echo "</body>"
echo "</html>"
