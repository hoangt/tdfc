#!/usr/bin/perl
#
# xilinx-area-constraints
#
# Emit Xilinx ".ucf" area constraint file (to stdout)
# for a minimum size box around a given number of VirtexII slices
#
# Usage:  xilinx-area-constraints <luts> [<expansionfactor>]
#				         [<offset>] [<instance>]
#         <luts>            : number of luts to target  (2 luts per slice)
#         <expansionfactor> : multiplies number of luts,          default  1.0
#         <offset>          : begin box at slice (offset,offset), default (0,0)
#         <instance>        : name of EDIF instance to constrain, default  *
#
# Eylon Caspi, 8/5/03

if (@ARGV<1) {
  print "xilinx-area-constraints:\n";
  print "        Emit Xilinx .ucf area constraint file (to stdout)\n";
  print "        for a minimum size box around a given number of VirtexII slices.\n\n";
  print "Usage:  xilinx-area-constraints  <luts>    [<expansionfactor>]\n";
  print "                                [<offset>] [<instance>]\n";
  print "        <luts>            : number of luts to target  (2 luts per slice)\n";
  print "        <expansionfactor> : multiplies number of luts,          default  1.0\n";
  print "        <offset>          : begin box at slice (offset,offset), default (0,0)\n";
  print "        <instance>        : name of EDIF instance to constrain, default  *\n";
  exit(1);
}

$luts		 = $ARGV[0];
$expansionfactor = $ARGV[1];
$offset          = $ARGV[2];
$instance        = $ARGV[3];

if (@ARGV<2)  { $expansionfactor = 1;   }
if (@ARGV<3)  { $offset          = 0;   }
if (@ARGV<4)  { $instance        = "*"; }

$slices = int(($luts * $expansionfactor + 1) / 2);
# print "slices = $slices\n";

$side = int(sqrt($slices));
# print "side = $side\n";

if ($side * $side >= $slices) {
  $side1 = $side;
  $side2 = $side;
}
elsif (($side+1)*$side >= $slices) {	  # Expand along Y (carry chain) first
  $side1 = $side;
  $side2 = $side+1;
}
elsif (($side+1)*($side+1) >= $slices) {  # Expand along X second
  $side1 = $side+1;
  $side2 = $side+1;
}
else {
  error("sqrt error");
}

# print "side1 = $side1\n";
# print "side2 = $side2\n";

printf("# Area constraints for a minimum size box containing $expansionfactor * $luts LUTS,\n");
printf("#   i.e. containing %d slices.\n", $slices);
printf("# Box = %d x %d = %d slices.\n", $side1, $side2, $side1*$side2);
printf("# Generated by xilinx-area-constraints, " . `date` . "\n");
printf("INST \"$instance\" AREA_GROUP = \"area_group\" ;\n");
printf("AREA_GROUP \"area_group\" RANGE = SLICE_X%dY%d:SLICE_X%dY%d ;\n\n",
       $offset, $offset, $offset+$side1-1, $offset+$side2-1);
