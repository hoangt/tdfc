#!/bin/tcsh
#
# Generate tab-delimited (Excel compatible) summary report
#   for every application project in this directory,
#   for every implementation thereof,
#   for every component thereof
# Assume pages were generated by "tdfc -synplify -pp1",
#   so every base module <op> induces a page _page_<op>
# If application is present, generated by "tdfc -synplify",
#   print only its top-level composition
# Use after synthesis (synplify-all, synplify-pages-all)
#
# Synplify 7.7
# Eylon Caspi, 10/16/03 9/29/04

set toolpath = ${0:h}

# set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -name _page_\* -print | perl -npe 's{.*/}{}; s{_qin$}{}; s{_q$}{}; s{_noin$}{}' | sort | uniq`
# set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -name \*_noin -print | perl -npe 's{.*/}{}; s{_noin$}{}'`

# if ($#topmodules == 0) then
#   # - if cannot find "_noin" modules, then take ALL modules as top
#   set topmodules = `find . -maxdepth 1 -mindepth 1 -type d -print | perl -npe 's{_ior}{}' | sort | uniq | perl -npe 's{.*/}{}'`
# endif

# Module list
#  - derived from Synplify project directories (appl = all minus pages)
#  - strip _ior suffix
#  - ignore appl-level extras (%_q %_qin %_noin, %_dpq) and %_ior
set  raw_modules = `find . -maxdepth 1 -mindepth 1 -type d -print | perl -npe 's{.*/}{}; s{_ior$}{}; s{(_noin|_qin|_q|_dpq)$}{}' | sort | uniq`
#set raw_behavs  = `echo ${raw_modules}     | tr ' ' '\n' | egrep '^_page_.*_noin' | perl -npe 's{^_page_(.*)_noin}{$1}'`
set  raw_behavs  = `echo ${raw_modules}     | tr ' ' '\n' | egrep '^.*_fsm'        | perl -npe 's{^(.*)_fsm}{$1}'`
set  raw_pattern = `echo ${raw_behavs}      | tr ' ' '|'`
if ($#raw_pattern > 0) then
set  topmodules_appl = `echo ${raw_modules} | tr ' ' '\n' | egrep -v "${raw_pattern}"`
else
set  topmodules_appl = (${raw_modules})
endif
set  topmodules_page = `echo ${raw_behavs}  | tr ' ' '\n' | perl -npe 's{^(.+)$}{_page_$1}'`
set  topmodules      = (${topmodules_appl} ${topmodules_page})

# echo raw_modules = \"${raw_modules}\"
# echo raw_behavs  = \"${raw_behavs}\"
# echo raw_pattern = \"${raw_pattern}\"
# echo topmodules_appl = \"${topmodules_appl}\"
# echo topmodules_page = \"${topmodules_page}\"
# echo topmodules      = \"${topmodules}\"

# - split $topmodules into application and pages
set topmodules_appl = `echo $topmodules | tr ' ' '\n' | egrep -v '^_page_'`
set topmodules_page = `echo $topmodules | tr ' ' '\n' | egrep    '^_page_'`

echo "Synplify results for:  ${cwd:h}"
echo `date`
echo ""
echo "Name\tComponent\tModule\tRevision\tClock (MHz)\tLUTs\tFFs\tLUT-FFs\tStates\tFSM Style\t"

#foreach topmodule ($topmodules_appl $topmodules_page)
foreach topmodule ($topmodules_appl                 )
  if ($topmodule == "$topmodules_appl") then
    set basemodule = ${topmodule}
    set components = (appl)
    set modules    = (${topmodule})
    set indexes    = (1)
  else
    set basemodule = ${topmodule:s/_page_//}
    set components = (fsm dp dpfsm qin q dpq noin top)
    set modules    = (${basemodule}_fsm ${basemodule}_dp ${basemodule}	\
		      ${topmodule}_qin ${topmodule}_q			\
		      ${topmodule}_dpq ${topmodule}_noin ${topmodule})
    set indexes    = (1 2 3 4 5 6 7 8)
  endif
  foreach i ($indexes)
    set component = ${components[$i]}
    set module    = ${modules[$i]}
    if (-d $module) then
      foreach revpath ($module/rev_4__200mhz)
        set rev = ${revpath:t}
        set srrfile = $revpath/${module}.srr
        echo -n "${basemodule}\t${component}\t${module}\t${rev}\t"
        if (-f $srrfile) then
	  set results = "`${toolpath}/synperf-concise ${srrfile}`"
  	  echo "$results\t"
        else
          echo "\t\t\t\t\t"
        endif
      end
    endif
  end
end
