#!/usr/bin/perl
#
# xilinx-area-constraints
#
# Emit Xilinx ".ucf" area constraint file (to stdout)
# for a minimum size box around a given number of VirtexII slices
#
# Usage:  xilinx-area-constraints <module> <luts> [<expansionfactor>]
#         <module>          : name of EDIF module
#         <luts>            : number of luts to target  (2 luts per slice)
#         <expansionfactor> : multiplies number of luts
#
# Eylon Caspi, 8/5/03

if (@ARGV<2) {
  print "xilinx-area-constraints:\n";
  print "        Emit Xilinx .ucf area constraint file (to stdout)\n";
  print "        for a minimum size box around a given number of VirtexII slices.\n\n";
  print "Usage:  xilinx-area-constraints <module> <luts> [<expansionfactor>]\n";
  print "        <module>          : name of EDIF module\n";
  print "        <luts>            : number of luts to target  (2 luts per slice)\n";
  print "        <expansionfactor> : multiplies number of luts\n";
  exit(1);
}

$module		 = $ARGV[0];
$luts		 = $ARGV[1];
$expansionfactor = $ARGV[2];

if (@ARGV<3) {
  $expansionfactor = 1;
}

$slices = int(($luts * $expansionfactor + 1) / 2);
# print "slices = $slices\n";

$side = int(sqrt($slices));
# print "side = $side\n";

if ($side * $side >= $slices) {
  $side1 = $side;
  $side2 = $side;
}
elsif (($side+1)*$side >= $slices) {	  # Expand along Y (carry chain) first
  $side1 = $side;
  $side2 = $side+1;
}
elsif (($side+1)*($side+1) >= $slices) {  # Expand along X second
  $side1 = $side+1;
  $side2 = $side+1;
}
else {
  error("sqrt error");
}

# print "side1 = $side1\n";
# print "side2 = $side2\n";

printf("# Area constraints for a minimum size box containing $expansionfactor * $luts LUTS,\n");
printf("#   i.e. containing %d slices.\n", $slices);
printf("# Generated by xilinx-area-constraints, " . `date` . "\n");
printf("AREA_GROUP \"$module\" RANGE = SLICE_X0Y0:SLICE_X%dY%d ;\n",
       $side1-1, $side2-1);
printf("INST * AREA_GROUP = \"$module\" ;\n\n");
