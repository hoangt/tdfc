#!/usr/bin/perl
#
# verilog-reg-shell
#
# Emit a Verilog file (to stdout) that adds I/O registers
# around some base module;  does not support parameter passing.
#
# Usage:  verilog-reg-shell <module>.v
#         <module>.v : verilog source, emitted by "tdfc -everilog"
#
# Eylon Caspi, 1/21/04

if (@ARGV<1) {
  print "verilog-reg-shell:\n";
  print "        Emit a Verilog file (to stdout) that adds I/O registers\n";
  print "        around some base module;  does not support parameter passing.\n\n";
  print "Usage:  verilog-reg-shell <module>.v\n";
  print "        <module>.v : verilog source, emitted by 'tdfc -everilog'\n";
  exit(1);
}

$modulev = $ARGV[0];

$module = $modulev;
$module =~ s/.v$//;

$newModule = "${module}_ior";

print "// Verilog I/O register shell for $module\n";
print "// Generated by verilog-reg-shell, " . `date` . "\n";

$numIOs = 0;
@ioLine;  @ioIsOutput;  @ioName;  @ioWidth;

while (<>) {
  if (/^\s*module\s+$module\s+/) {
      $moduleLine = $_;
      last;
  }
}

while (<>) {
  if (/^\s*endmodule/) {
      last;
  }
  while (/(input\s+(\[(\d+):0\]\s+)?(\w+)\s*;)/g) {
      if ($4 eq "clock" || $4 eq "reset") { next; }
      $ioLine[$numIOs]     = $1;
      $ioName[$numIOs]     = $4;
      $ioWidth[$numIOs]    = $3;
      $ioIsOutput[$numIOs] = 0;
      $numIOs++;
  }
  while (/(output\s+(\[(\d+):0\]\s+)?(\w+)\s*;)/g) {
      $ioLine[$numIOs]     = $1;
      $ioName[$numIOs]     = $4;
      $ioWidth[$numIOs]    = $3;
      $ioIsOutput[$numIOs] = 1;
      $numIOs++;
  }
}

# include core  (commented out)
print "// `include \"$modulev\"\n";
print "\n\n";

# module declaration, black-box core
$bbModuleLine =  $moduleLine;
$bbModuleLine =~ s{;}{  /* synthesis syn_black_box */ ;};
print $bbModuleLine;
print "\n";

# I/O declarations, black-box core
print "  input clock;\n";
print "  input reset;\n";
print "\n";
for ($i=0; $i<$numIOs; $i++)   { print "  $ioLine[$i]\n" }
print "\n";

# end module, black-box core
print "endmodule  // $module\n";
print "\n\n";

# module declaration
$newModuleLine =  $moduleLine;
$newModuleLine =~ s/$module/$newModule/;
print $newModuleLine;
print "\n";

# I/O declarations
print "  input clock;\n";
print "  input reset;\n";
print "\n";
for ($i=0; $i<$numIOs; $i++)   { print "  $ioLine[$i]\n" }
print "\n";

# I/O registers
for ($i=0; $i<$numIOs; $i++)   { $L =  $ioLine[$i];
				 $L =~ s/(input|output)\s+/reg /;
				 $L =~ s/$ioName[$i]/$ioName[$i]_R/;
				 $L =~ s{;}{  /* synthesis syn_allow_retiming=0 */ ;};
				 print "  $L\n"; }
print "\n";

# output wires
for ($i=0; $i<$numIOs; $i++)   { if ($ioIsOutput[$i]) {
				   $L =  $ioLine[$i];
				   $L =~ s/output\s+/wire /;
				   $L =~ s/$ioName[$i]/$ioName[$i]_W/;
				   print "  $L\n"; } }
print "\n";

# output assign
for ($i=0; $i<$numIOs; $i++)   { if ($ioIsOutput[$i]) {
				   $L = "$ioName[$i] = $ioName[$i]_R";
				   print "  assign $L;\n"; } }
print "\n";

# always block
print "  always @(posedge clock) begin\n";
for ($i=0; $i<$numIOs; $i++)   { if ($ioIsOutput[$i]) {
				   $L = "$ioName[$i]_R = $ioName[$i]_W"; }
				 else {
				   $L = "$ioName[$i]_R = $ioName[$i]"; }
				 print "    $L;\n"; }
print "  end\n";
print "\n";

# module call
push (@newModuleLine, "  $module ${module}_ (clock, reset");
for ($i=0; $i<$numIOs; $i++)   { if ($ioIsOutput[$i]) {
				   $L = "$ioName[$i]_W"; }
				 else {
				   $L = "$ioName[$i]_R"; }
				 push(@newModuleLine,", ");
				 push(@newModuleLine,$L);   }
push (@newModuleLine, ")  /* synthesis syn_hier = \"firm\" */ ;\n");
print @newModuleLine;
print "\n";

# end module
print "endmodule  // $newModule\n";
