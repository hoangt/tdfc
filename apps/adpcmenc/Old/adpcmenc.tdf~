// ADPCM encoder (16-->4)
// Adapted from UCLA MediaBench Intel/DVI ADPCM encoder
// Based on CS262 project code (Eylon Caspi, 11/23/98)
//
// Eylon Caspi, 3/13/00
//
// 8 pages, ~35-slow


DiffSign (input  unsigned[16] inVal,
	  input  unsigned[16] inValPred,
	  output unsigned[16] outDiff,
	  output boolean      outSign_ValPred,
	  output boolean      outSign_MuxNibbles)
{
  // betweenFirings(2);
  // betweenOutputs(6);

  state fire   (inVal,inValPred)	goto delay1;
  state delay1 ():			goto delay2;
  state delay2 ():			goto delay3;
  state delay3 ():			goto delay4;
  state delay4 ():			goto delay5;
  state delay5 ():
  {
    signed[17] diff = inVal-inValPred;
    if (diff>0)
    {
      outDiff=(unsigned[16])bitsof(diff);
      outSign_ValPred=0;
      outSign_MuxNibbles=0;
    }
    else
    {
      outDiff=(unsigned[16])bitsof(-diff);
      outSign_ValPred=1;
      outSign_MuxNibbles=1;
    }
    if (inVal==0x7fff)
      done();
  }
}


DivMul2 (input  unsigned[16] inDiff,
	 input  unsigned[8]  inStep,
	 output boolean      outDelta2_MuxNibbles,
	 output boolean      outDelta2_Index,
	 output unsigned[16] outDiffReduced2,
	 output unsigned[16] outStepZeroed2)
{
  // betweenFirings(2);
  // betweenOutputs(6);

  state fire   (inDiff,inStepHigh,inStepLow)	goto delay1;
  state delay1 ():				goto delay2;
  state delay2 ():				goto delay3;
  state delay3 ():				goto delay4;
  state delay4 ():				goto delay5;
  state delay5 ():
  {
    unsigned[16] step = (inStepHigh<<8) | inStepLow;
    unsigned[17] diffReduced2 = inDiff-step;
    if (diffReduced2>=0)
    {
      outDelta2_MuxNibbles=1;
      outDelta2_Index=1;
      outDiffReduced2=(unsigned[16])bitsof(diffReduced2);
      outStepZeroed2=step;
    }
    else {
      outDelta2_MuxNibbles=0;
      outDelta2_Index=0;
      outDiffReduced2=inDdiff;
      outStepZeroed2=0;
    }
  }
}


DivMul1 (input  unsigned[16] inDiffReduced2,
	 input  unsigned[16] inStepZeroed2,
	 input  unsigned[8]  inStep,
	 output boolean      outDelta1_MuxNibbles,
	 output boolean      outDelta1_Index,
	 output unsigned[16] outDiffReduced1,
	 output unsigned[16] outStepZeroed1,
	 output unsigned[16] outVPDiff1)
{
  // betweenFirings(2);
  // betweenOutputs(6);

  state fire (inDiffReduced2,inStepZeroed2,inStepHigh,inStepLow):
					goto delay1;
  state delay1 ():			goto delay2;
  state delay2 ():			goto delay3;
  state delay3 ():			goto delay4;
  state delay4 ():			goto delay5;
  state delay5 ():
  {
    unsigned[16] step         = (inStepHigh<<8) | inStepLow;
    signed[17]   diffReduced1 = diffReduced2 - (step>>1);
    if (diffReduced1>=0)
    {
      outDelta1_MuxNibbles=1;
      outDelta1_Index=1;
      outDiffReduced1=(unsigned[16])bitsof(diffReduced1);
      outStepZeroed1=(step>>1);
    }
    else
    {
      outDelta1_MuxNibbles=0;
      outDelta1_Index=0;
      outDiffReduced1=diffReduced1;	// ?! switch sign ?!
      outStepZeroed1=0;
    }
    outVPDiff1 = (step>>3)+stepzeroed2;
  }
}


DivMul0 (input  unsigned[16] inDiffReduced1,
	 input  unsigned[16] inStepZeroed1,
	 input  unsigned[8]  inStep,
	 input  unsigned[16] inVPDiff1,
	 output boolean      outDelta0_MuxNibbles,
	 output boolean      outDelta0_Index,
	 output unsigned[16] outVPDiffAbs)
{
  // betweenFirings(2);
  // betweenOutputs(9);

  state fire (inDiffReduced1,inStepZeroed1,inStepHigh,inStepLow,inVPDiff1):
					goto delay1;
  state delay1 ():			goto delay2;
  state delay2 ():			goto delay3;
  state delay3 ():			goto delay4;
  state delay4 ():			goto delay5;
  state delay5 ():			goto delay6;
  state delay6 ():			goto delay7;
  state delay7 ():			goto delay8;
  state delay8 ():
  {
    unsigned[8]  step = (inStepHigh<<8) | inStepLow;
    unsigned[17] VPDiff0 = inVPDiff1 + inStepZeroed1;
    signed[17]   diffReduced0 = inDiffReduced1 - (step>>2);
    unsigned[16] stepZeroed0;
    if (diffReduced0>=0)
    {
      outDelta0_MuxNibbles=1;
      outDelta0_Index=1;
      stepZeroed0 = step>>2;
    }
    else {
      outDelta0_MuxNibbles=0;
      outDelta0_Index=0;
      stepZeroed0=0;
    }
    outVPDiffAbs=(unsigned[16])(VPDiff0+stepZeroed0);
  }
}


ValPredUpdate (input  unsigned[16] inVPDiffAbs,
	       input  boolean      inSign,
	       output unsigned[16] outValPred)
{
  // betweenFirings(8);
  // betweenFirings(8);

  unsigned[16] valPred=0;

  state fire   (inVPDiffAbs,inSign):	goto delay1;
  state delay1 ():			goto delay2;
  state delay2 ():			goto delay3;
  state delay3 ():			goto delay4;
  state delay4 ():			goto delay5;
  state delay5 ():			goto delay6;
  state delay6 ():			goto delay7;
  state delay7 ():
  {
    signed[17] VPDiff = sign?(-inVPDiffAbs):VPDiffAbs;
    signed[17] valPredTmp = valPred + VPDiff + (sign?1:0);
    if (valPredTmp<-32768)
      valPred = -32768;
    else if (valPredTmp>32767)
      valPred = 32767;
    else
      valPred = valPredTmp;
    outValPred=valPred;
  }
}


IndexOffsetTable (input  unsigned[7] inIndex,
		  input  boolean     inDelta2,
		  input  boolean     inDelta1,
		  input  boolean     inDelta0,
		  output unsigned[7] outIndex_Index,
		  output unsigned[7] outIndex_StepTable
{
  // private static int indexOffset[] = {-1, -1, -1, -1, 2, 4, 6, 8};
  // betweenFirings(1);
  // betweenOutputs(7);

  state fire   (inIndex,inDelta2,inDelta1,inDelta0):	goto delay1;
  state delay1 ():					goto delay2;
  state delay2 ():					goto delay3;
  state delay3 ():					goto delay4;
  state delay4 ():					goto delay5;
  state delay5 ():					goto delay6;
  state delay6 ():					goto delay7;
  {
    // unsigned[3] delta = cat(inDelta2,inDelta1,inDelta0);
    signed[5] indexOffset = delta2 ? (delta1 ? (delta0 ? 8 : 6)
					     : (delta0 ? 4 : 2)) : -1;
    signed[8] newIndex    = index + indexOffset;
    signed[8] newIndexM88 = newIndex - 88;
    unsigned[7] outIndex  = (index<0) ? 0 :
			    (newIndexM88<88) ? 88 :
			    bitsof(newIndex);
    outIndex_Index=outIndex;
    outIndex_StepTable=outIndex;
  }
}


MuxNibbles (input  boolean inSign,
	    input  boolean inDelta2,
	    input  boolean inDelta1,
	    input  boolean inDelta0,
	    output unsigned[4] outAdpcm)
{
  // betweenFirings(1);
  // betweenOutputs(1);

  state fire (inSign,inDelta2,inDelta1,inDelta0):
  {
    unsigned[4] outAdpcm = cat(inSign,inDelta2,inDelta1,inDelta0);
  }
}


AdpcmDesign ()
{
  unsigned[18][16] srcArray =	{0x0010,
				 0x0001,
				 0x0012,
				 0x0003
				 0x0014
				 0x0005
				 0x0016
				 0x0007
				 0x0018
				 0x0009
				 0x001a
				 0x000b
				 0x001c
				 0x000d
				 0x001e
				 0x000f
				 0x0000,
				 0x7fff };
  unsigned[18][4] sinkArray;
  unsigned[88][16] stepTable =
    { 7, 8, 9, 10, 11, 12, 13, 14, 16, 17,
      19, 21, 23, 25, 28, 31, 34, 37, 41, 45,
      50, 55, 60, 66, 73, 80, 88, 97, 107, 118,
      130, 143, 157, 173, 190, 209, 230, 253, 279, 307,
      337, 371, 408, 449, 494, 544, 598, 658, 724, 796,
      876, 963, 1060, 1166, 1282, 1411, 1552, 1707, 1878, 2066,
      2272, 2499, 2749, 3024, 3327, 3660, 4026, 4428, 4871, 5358,
      5894, 6484, 7132, 7845, 8630, 9493, 10442, 11487, 12635, 13899,
      15289, 16818, 18500, 20350, 22385, 24623, 27086, 29794, 32767
    };

  segment_seq_r(5,18,16,srcArray, srcData);
  segment_seq_w(5,18,4 ,sinkArray,outAdpcm);
  segment_r(7,88,16,stepTable,outIndex_StepTable,outStep);

  DiffSign(/*in */ srcData,outValPred,
	   /*out*/ outDiff,outSign_ValPred,outSign_MuxNibbles);

  DivMul2(/*in */ outDiff,outStep,
	  /*out*/ outDelta2_MuxNibbles,outDelta2_Index,
		  outDiffReduced2,outStepZeroed2);

  DivMul1(/*in */ outDiffReduced2,outStepZeroed2,outStep,
	  /*out*/ outDelta1_MuxNibbles,outDelta1_Index,
		  outDiffReduced1,outStepZeroed1,outVPDiff1);

  DivMul0(/*in */ outDiffReduced1,outStepZeroed1,outStep,outVPDiff1,
	  /*out*/ outDelta0_MuxNibbles,outDelta0_Index,
		  outVPDiffAbs);

  ValPredUpdate(/*in */ outVPDiffAbs,outSign_ValPred,
		/*out*/ outValPred);

  IndexOffsetTable(/*in */ outIndex_Index,outDelta2_Index,
			   outDelta1_Index,outDelta0_Index,
		   /*out*/ outIndex_Index,outIndex_StepTable);

  MuxNibbles(/*in */ outSign_MuxNibbles,outDelta2_MuxNibbles,
		     outDelta1_MuxNibbles,outDelta0_MuxNibbles,
	     /*out*/ outAdpcm);
}
