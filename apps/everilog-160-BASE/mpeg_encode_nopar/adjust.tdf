// Copyright (c) 1999 The Regents of the University of California.
// All rights reserved.
// Permission to use, copy, modify, and distribute this software and its
// documentation for any purpose, without fee, and without written agreement is
// hereby granted, provided that the above copyright notice and the following
// two paragraphs appear in all copies of this software.
// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
// DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
// OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
// CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
// ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
// PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.


adjust(param unsigned[16] segSize, input signed[16] inthere, 
       output signed[16] outthere, input unsigned[5] mod)

{

  unsigned[5] MOTION_FORWARD = 0;
  unsigned[5] MOTION_BACKWARD = 1;
  unsigned[5] INTRA = 4;

  unsigned[16] index = 0;
  
  state first(inthere): 

    {
      outthere = inthere - 1024; // 8*128
      index = index+1;
      if (index == segSize) {
	goto choose;
      } 
    }

  state choose(mod): {
    
    index = 0;
    if (mod==INTRA) {
      goto intraout;
    } else {
      goto steady;
    }
    
  }

  state intraout(inthere): {
    
    outthere = inthere - 1024;
    
    index = index+1;
    if (index == 48) {
      goto choose;
    }

  }

  
  state steady(inthere): {
    
    outthere = inthere;
    
    index = index+1;
    if (index == 48) {
      goto choose;
    }

  }

}
