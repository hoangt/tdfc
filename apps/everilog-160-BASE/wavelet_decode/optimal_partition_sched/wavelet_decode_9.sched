// schedc 1.3, Jul 29 2001 18:15:28
// filename = wavelet_decode/new_sched/wavelet_decode_9.template
//
// ---- SCHEDULE HEADER BEGIN ----
// Schedule generation options:
//    minIO clustering: false
//    ratefile name: wavelet_decode/wavelet_decode.ratefile
//    traversal type: exh
// 
//  0| 30, 24, 31, 25, 32, 26, 18, 19, 20, 12, 13, 14, 38, 39, 40, 41, 42, 43, |use cp=1.00, cmb=1.00|utl cp=0.83|ave cp=0.83|drain=0.07
//  1| 27, 21, 28, 22, 29, 23, 15, 16, 17, 9, 10, 11, 35, 36, 37, 44, 45, 46, |use cp=1.00, cmb=1.00|utl cp=0.76|ave cp=0.76|drain=0.02
//  2| 7, 4, 8, 6, 5, 3, 2, 1, 0, 33, 34, 41, 42, 43, 44, 45, 46, |use cp=1.00, cmb=0.89|utl cp=0.24|ave cp=0.24|drain=1.00
// 
// ave|use cp=1.00, cmb=0.96|utl cp=0.61|ave cp=0.61
// 
// w_ave|utl cp=0.29
// ---- SCHEDULE HEADER END ----

array {
   CPs: 9;
   CMBs: 9;
   CMB Partitions:
    B0 (B0, B1, B2, B3, B4, B5, B6) :
    null (B7, B8, B9, B10, B11);
}
design {
    visual: "something";
    0: page (1, 1) "DecWaveHD in DecWaveHD.tdf" : 0.output0 => cpu.input0 ;
    1: page (4, 4) "DecWaveVD in DecWaveVD.tdf" : 1.output0 => 0.input0, 1.output1 => 1.input1, 1.output2 => 1.input2, 1.output3 => 1.input3 ;
    2: page (2, 1) "DecWaveH in DecWaveH.tdf" : 2.output0 => 1.input0 ;
    3: page (4, 3) "DecWaveV in DecWaveV.tdf" : 3.output0 => 2.input0, 3.output1 => 3.input2, 3.output2 => 3.input3 ;
    4: page (4, 3) "DecWaveV in DecWaveV.tdf" : 4.output0 => 2.input1, 4.output1 => 4.input2, 4.output2 => 4.input3 ;
    5: page (2, 1) "DecWaveH in DecWaveH.tdf" : 5.output0 => 3.input0 ;
    6: page (4, 3) "DecWaveV in DecWaveV.tdf" : 6.output0 => 5.input0, 6.output1 => 6.input2, 6.output2 => 6.input3 ;
    7: page (4, 3) "DecWaveV in DecWaveV.tdf" : 7.output0 => 5.input1, 7.output1 => 7.input2, 7.output2 => 7.input3 ;
    8: page (1, 1) "DQuant_DC in DQuant_DC.tdf" : 8.output0 => 6.input0, cpu.output0 => 8.input0 ;
    9: page (1, 1) "DQuant in DQuant.tdf" : 9.output0 => 7.input0 ;
    10: page (1, 1) "DQuant in DQuant.tdf" : 10.output0 => 6.input1 ;
    11: page (1, 1) "DQuant in DQuant.tdf" : 11.output0 => 7.input1 ;
    12: page (1, 1) "DQuant in DQuant.tdf" : 12.output0 => 4.input0 ;
    13: page (1, 1) "DQuant in DQuant.tdf" : 13.output0 => 3.input1 ;
    14: page (1, 1) "DQuant in DQuant.tdf" : 14.output0 => 4.input1 ;
    15: page (1, 1) "__DZLE in __DZLE.tdf" : 15.output0 => 9.input0 ;
    16: page (1, 1) "__DZLE in __DZLE.tdf" : 16.output0 => 10.input0 ;
    17: page (1, 1) "__DZLE in __DZLE.tdf" : 17.output0 => 11.input0 ;
    18: page (1, 1) "__DZLE in __DZLE.tdf" : 18.output0 => 12.input0 ;
    19: page (1, 1) "__DZLE in __DZLE.tdf" : 19.output0 => 13.input0 ;
    20: page (1, 1) "__DZLE in __DZLE.tdf" : 20.output0 => 14.input0 ;
    21: page (2, 2) "__DecHuffByte in __DecHuffByte.tdf" : 21.output0 => 27.input0, 21.output1 => 15.input0, cpu.output1 => 21.input0 ;
    22: page (2, 2) "__DecHuffByte in __DecHuffByte.tdf" : 22.output0 => 28.input0, 22.output1 => 16.input0, cpu.output2 => 22.input0 ;
    23: page (2, 2) "__DecHuffByte in __DecHuffByte.tdf" : 23.output0 => 29.input0, 23.output1 => 17.input0, cpu.output3 => 23.input0 ;
    24: page (2, 2) "__DecHuffByte in __DecHuffByte.tdf" : 24.output0 => 30.input0, 24.output1 => 18.input0, cpu.output4 => 24.input0 ;
    25: page (2, 2) "__DecHuffByte in __DecHuffByte.tdf" : 25.output0 => 31.input0, 25.output1 => 19.input0, cpu.output5 => 25.input0 ;
    26: page (2, 2) "__DecHuffByte in __DecHuffByte.tdf" : 26.output0 => 32.input0, 26.output1 => 20.input0, cpu.output6 => 26.input0 ;
    27: segment (1, 1) "Segment" : 27.output0 => 21.input1 ;
    28: segment (1, 1) "Segment" : 28.output0 => 22.input1 ;
    29: segment (1, 1) "Segment" : 29.output0 => 23.input1 ;
    30: segment (1, 1) "Segment" : 30.output0 => 24.input1 ;
    31: segment (1, 1) "Segment" : 31.output0 => 25.input1 ;
    32: segment (1, 1) "Segment" : 32.output0 => 26.input1 ;
    insert stitch segment 33 between 0.output0 and cpu;
    insert stitch segment 34 between cpu.output0 and 8;
    insert stitch segment 35 between cpu.output1 and 21;
    insert stitch segment 36 between cpu.output2 and 22;
    insert stitch segment 37 between cpu.output3 and 23;
    insert stitch segment 38 between cpu.output4 and 24;
    insert stitch segment 39 between cpu.output5 and 25;
    insert stitch segment 40 between cpu.output6 and 26;
    insert stitch segment 41 between 12.output0 and 4;
    insert stitch segment 42 between 13.output0 and 3;
    insert stitch segment 43 between 14.output0 and 4;
    insert stitch segment 44 between 9.output0 and 7;
    insert stitch segment 45 between 10.output0 and 6;
    insert stitch segment 46 between 11.output0 and 7;
}
schedule {
    pre {
        CP0( ; 24.config -> CMB0[1][10], 24.state -> CMB0[1][10], 24.fifos -> CMB0[1][10], 21.config -> CMB0[1][8], 21.state -> CMB0[1][8], 21.fifos -> CMB0[1][8], 7.config -> CMB2[1][7], 7.state -> CMB2[1][7], 7.fifos -> CMB2[1][7]; nop);
        CP1( ; 25.config -> CMB1[1][10], 25.state -> CMB1[1][10], 25.fifos -> CMB1[1][10], 22.config -> CMB1[1][8], 22.state -> CMB1[1][8], 22.fifos -> CMB1[1][8], 4.config -> CMB3[1][7], 4.state -> CMB3[1][7], 4.fifos -> CMB3[1][7]; nop);
        CP2( ; 26.config -> CMB2[1][10], 26.state -> CMB2[1][10], 26.fifos -> CMB2[1][10], 23.config -> CMB2[1][8], 23.state -> CMB2[1][8], 23.fifos -> CMB2[1][8], 8.config -> CMB4[1][7], 8.state -> CMB4[1][7], 8.fifos -> CMB4[1][7]; nop);
        CP3( ; 18.config -> CMB3[1][10], 18.state -> CMB3[1][10], 18.fifos -> CMB3[1][10], 15.config -> CMB3[1][8], 15.state -> CMB3[1][8], 15.fifos -> CMB3[1][8], 6.config -> CMB5[1][7], 6.state -> CMB5[1][7], 6.fifos -> CMB5[1][7]; nop);
        CP4( ; 19.config -> CMB4[1][10], 19.state -> CMB4[1][10], 19.fifos -> CMB4[1][10], 16.config -> CMB4[1][8], 16.state -> CMB4[1][8], 16.fifos -> CMB4[1][8], 5.config -> CMB6[1][7], 5.state -> CMB6[1][7], 5.fifos -> CMB6[1][7]; nop);
        CP5( ; 20.config -> CMB5[1][10], 20.state -> CMB5[1][10], 20.fifos -> CMB5[1][10], 17.config -> CMB5[1][8], 17.state -> CMB5[1][8], 17.fifos -> CMB5[1][8], 3.config -> CMB7[1][7], 3.state -> CMB7[1][7], 3.fifos -> CMB7[1][7]; nop);
        CP6( ; 12.config -> CMB6[1][10], 12.state -> CMB6[1][10], 12.fifos -> CMB6[1][10], 9.config -> CMB6[1][8], 9.state -> CMB6[1][8], 9.fifos -> CMB6[1][8], 2.config -> CMB8[1][7], 2.state -> CMB8[1][7], 2.fifos -> CMB8[1][7]; nop);
        CP7( ; 13.config -> CMB7[1][10], 13.state -> CMB7[1][10], 13.fifos -> CMB7[1][10], 10.config -> CMB7[1][8], 10.state -> CMB7[1][8], 10.fifos -> CMB7[1][8]; nop);
        CP8( ; 14.config -> CMB8[1][10], 14.state -> CMB8[1][10], 14.fifos -> CMB8[1][10], 11.config -> CMB8[1][8], 11.state -> CMB8[1][8], 11.fifos -> CMB8[1][8]; nop);
        CMB0( ; ; nop, 27.fifos -> CMB0[1][9], 33.fifos -> CMB0[1][7]);
        CMB1( ; ; nop, 28.fifos -> CMB1[1][9], 34.fifos -> CMB1[1][7]);
        CMB2( ; ; nop, 32.fifos -> CMB2[1][11], 29.fifos -> CMB2[1][9]);
        CMB3( ; ; nop, 38.fifos -> CMB3[1][11], 35.fifos -> CMB3[1][9]);
        CMB4( ; ; nop, 39.fifos -> CMB4[1][11], 36.fifos -> CMB4[1][9]);
        CMB5( ; ; nop, 40.fifos -> CMB5[1][11], 37.fifos -> CMB5[1][9]);
        CMB6( ; ; nop, 41.fifos -> CMB6[1][11], 44.fifos -> CMB6[1][9]);
        CMB7( ; ; nop, 42.fifos -> CMB7[1][11], 45.fifos -> CMB7[1][9]);
        CMB8( ; ; nop, 43.fifos -> CMB8[1][11], 46.fifos -> CMB8[1][9]);
    }
    timeslice 0 {
        CP0(24 ; start(CP0), connect(CP0.output0, CMB0.input0), connect(CP0.output1, CP3.input0), CMB0[1][10] -> CP0.config, CMB0[1][10] -> CP0.state, CMB0[1][10] -> CP0.fifos; nop, CP0.state -> CMB0[1][10], CP0.fifos -> CMB0[1][10]);
        CP1(25 ; start(CP1), connect(CP1.output0, CMB1.input0), connect(CP1.output1, CP4.input0), CMB1[1][10] -> CP1.config, CMB1[1][10] -> CP1.state, CMB1[1][10] -> CP1.fifos; nop, CP1.state -> CMB1[1][10], CP1.fifos -> CMB1[1][10]);
        CP2(26 ; start(CP2), connect(CP2.output0, CMB2.input0), connect(CP2.output1, CP5.input0), CMB2[1][10] -> CP2.config, CMB2[1][10] -> CP2.state, CMB2[1][10] -> CP2.fifos; nop, CP2.state -> CMB2[1][10], CP2.fifos -> CMB2[1][10]);
        CP3(18 ; start(CP3), connect(CP3.output0, CP6.input0), CMB3[1][10] -> CP3.config, CMB3[1][10] -> CP3.state, CMB3[1][10] -> CP3.fifos; nop, CP3.state -> CMB3[1][10], CP3.fifos -> CMB3[1][10]);
        CP4(19 ; start(CP4), connect(CP4.output0, CP7.input0), CMB4[1][10] -> CP4.config, CMB4[1][10] -> CP4.state, CMB4[1][10] -> CP4.fifos; nop, CP4.state -> CMB4[1][10], CP4.fifos -> CMB4[1][10]);
        CP5(20 ; start(CP5), connect(CP5.output0, CP8.input0), CMB5[1][10] -> CP5.config, CMB5[1][10] -> CP5.state, CMB5[1][10] -> CP5.fifos; nop, CP5.state -> CMB5[1][10], CP5.fifos -> CMB5[1][10]);
        CP6(12 ; start(CP6), connect(CP6.output0, CMB6.input0), CMB6[1][10] -> CP6.config, CMB6[1][10] -> CP6.state, CMB6[1][10] -> CP6.fifos; nop, CP6.state -> CMB6[1][10], CP6.fifos -> CMB6[1][10]);
        CP7(13 ; start(CP7), connect(CP7.output0, CMB7.input0), CMB7[1][10] -> CP7.config, CMB7[1][10] -> CP7.state, CMB7[1][10] -> CP7.fifos; nop, CP7.state -> CMB7[1][10], CP7.fifos -> CMB7[1][10]);
        CP8(14 ; start(CP8), connect(CP8.output0, CMB8.input0), CMB8[1][10] -> CP8.config, CMB8[1][10] -> CP8.state, CMB8[1][10] -> CP8.fifos; nop, CP8.state -> CMB8[1][10], CP8.fifos -> CMB8[1][10]);
        CMB0(30 in this[0][0] ; start(CMB0), connect(CMB0.output0, CP0.input1), 30.data -> CMB0[0][0], CMB0.active = CMB0[0][0] as 30, CMB0[1][11] -> CMB0.fifos, 30.fifos -> CMB0[1][11]; nop, CMB0[0][0] -> 30.data, CMB0.fifos -> CMB0[1][11], save_pointers(CMB0));
        CMB1(31 in this[0][0] ; start(CMB1), connect(CMB1.output0, CP1.input1), 31.data -> CMB1[0][0], CMB1.active = CMB1[0][0] as 31, CMB1[1][11] -> CMB1.fifos, 31.fifos -> CMB1[1][11]; nop, CMB1[0][0] -> 31.data, CMB1.fifos -> CMB1[1][11], save_pointers(CMB1));
        CMB2(32 in this[0][0] ; start(CMB2), connect(CMB2.output0, CP2.input1), 32.data -> CMB2[0][0], CMB2.active = CMB2[0][0] as 32, CMB2[1][11] -> CMB2.fifos; nop, CMB2[0][0] -> 32.data, CMB2.fifos -> CMB2[1][11], save_pointers(CMB2));
        CMB3(38 in this[0][0] ; CMB3.mode = seqsrcsink, detect_empty(CMB3), start(CMB3), connect(CMB3.output0, CP0.input0), 38.data -> CMB3[0][0], CMB3.active = CMB3[0][0] as 38, CMB3[1][11] -> CMB3.fifos; nop, CMB3[0][0] -> 38.data, CMB3.fifos -> CMB3[1][11], save_pointers(CMB3));
        CMB4(39 in this[0][0] ; CMB4.mode = seqsrcsink, detect_empty(CMB4), start(CMB4), connect(CMB4.output0, CP1.input0), 39.data -> CMB4[0][0], CMB4.active = CMB4[0][0] as 39, CMB4[1][11] -> CMB4.fifos; nop, CMB4[0][0] -> 39.data, CMB4.fifos -> CMB4[1][11], save_pointers(CMB4));
        CMB5(40 in this[0][0] ; CMB5.mode = seqsrcsink, detect_empty(CMB5), start(CMB5), connect(CMB5.output0, CP2.input0), 40.data -> CMB5[0][0], CMB5.active = CMB5[0][0] as 40, CMB5[1][11] -> CMB5.fifos; nop, CMB5[0][0] -> 40.data, CMB5.fifos -> CMB5[1][11], save_pointers(CMB5));
        CMB6(41 in this[0][0] ; CMB6.mode = seqsink, start(CMB6), 41.data -> CMB6[0][0], CMB6.active = CMB6[0][0] as 41, CMB6[1][11] -> CMB6.fifos; nop, CMB6[0][0] -> 41.data, CMB6.fifos -> CMB6[1][11], save_pointers(CMB6));
        CMB7(42 in this[0][0] ; CMB7.mode = seqsink, start(CMB7), 42.data -> CMB7[0][0], CMB7.active = CMB7[0][0] as 42, CMB7[1][11] -> CMB7.fifos; nop, CMB7[0][0] -> 42.data, CMB7.fifos -> CMB7[1][11], save_pointers(CMB7));
        CMB8(43 in this[0][0] ; CMB8.mode = seqsink, detect_full(CMB8), start(CMB8), 43.data -> CMB8[0][0], CMB8.active = CMB8[0][0] as 43, CMB8[1][11] -> CMB8.fifos; nop, CMB8[0][0] -> 43.data, CMB8.fifos -> CMB8[1][11], save_pointers(CMB8));
    }

    timeslice 1 {
        CP0(21 ; CMB0[1][8] -> CP0.config, CMB0[1][8] -> CP0.state, CMB0[1][8] -> CP0.fifos, start(CP0), connect(CP0.output0, CMB0.input0), connect(CP0.output1, CP3.input0); nop, CP0.state -> CMB0[1][8], CP0.fifos -> CMB0[1][8]);
        CP1(22 ; CMB1[1][8] -> CP1.config, CMB1[1][8] -> CP1.state, CMB1[1][8] -> CP1.fifos, start(CP1), connect(CP1.output0, CMB1.input0), connect(CP1.output1, CP4.input0); nop, CP1.state -> CMB1[1][8], CP1.fifos -> CMB1[1][8]);
        CP2(23 ; CMB2[1][8] -> CP2.config, CMB2[1][8] -> CP2.state, CMB2[1][8] -> CP2.fifos, start(CP2), connect(CP2.output0, CMB2.input0), connect(CP2.output1, CP5.input0); nop, CP2.state -> CMB2[1][8], CP2.fifos -> CMB2[1][8]);
        CP3(15 ; CMB3[1][8] -> CP3.config, CMB3[1][8] -> CP3.state, CMB3[1][8] -> CP3.fifos, start(CP3), connect(CP3.output0, CP6.input0); nop, CP3.state -> CMB3[1][8], CP3.fifos -> CMB3[1][8]);
        CP4(16 ; CMB4[1][8] -> CP4.config, CMB4[1][8] -> CP4.state, CMB4[1][8] -> CP4.fifos, start(CP4), connect(CP4.output0, CP7.input0); nop, CP4.state -> CMB4[1][8], CP4.fifos -> CMB4[1][8]);
        CP5(17 ; CMB5[1][8] -> CP5.config, CMB5[1][8] -> CP5.state, CMB5[1][8] -> CP5.fifos, start(CP5), connect(CP5.output0, CP8.input0); nop, CP5.state -> CMB5[1][8], CP5.fifos -> CMB5[1][8]);
        CP6(9 ; CMB6[1][8] -> CP6.config, CMB6[1][8] -> CP6.state, CMB6[1][8] -> CP6.fifos, start(CP6), connect(CP6.output0, CMB6.input0); nop, CP6.state -> CMB6[1][8], CP6.fifos -> CMB6[1][8]);
        CP7(10 ; CMB7[1][8] -> CP7.config, CMB7[1][8] -> CP7.state, CMB7[1][8] -> CP7.fifos, start(CP7), connect(CP7.output0, CMB7.input0); nop, CP7.state -> CMB7[1][8], CP7.fifos -> CMB7[1][8], CMB0[1][11] -> 30.fifos);
        CP8(11 ; CMB8[1][8] -> CP8.config, CMB8[1][8] -> CP8.state, CMB8[1][8] -> CP8.fifos, start(CP8), connect(CP8.output0, CMB8.input0); nop, CP8.state -> CMB8[1][8], CP8.fifos -> CMB8[1][8], CMB1[1][11] -> 31.fifos);
        CMB0(27 in this[0][0] ; 27.data -> CMB0[0][0], CMB0.active = CMB0[0][0] as 27, CMB0[1][9] -> CMB0.fifos, start(CMB0), connect(CMB0.output0, CP0.input1); nop, CMB0[0][0] -> 27.data, CMB0.fifos -> CMB0[1][9], save_pointers(CMB0));
        CMB1(28 in this[0][0] ; 28.data -> CMB1[0][0], CMB1.active = CMB1[0][0] as 28, CMB1[1][9] -> CMB1.fifos, start(CMB1), connect(CMB1.output0, CP1.input1); nop, CMB1[0][0] -> 28.data, CMB1.fifos -> CMB1[1][9], save_pointers(CMB1));
        CMB2(29 in this[0][0] ; 29.data -> CMB2[0][0], CMB2.active = CMB2[0][0] as 29, CMB2[1][9] -> CMB2.fifos, start(CMB2), connect(CMB2.output0, CP2.input1); nop, CMB2[0][0] -> 29.data, CMB2.fifos -> CMB2[1][9], save_pointers(CMB2));
        CMB3(35 in this[0][0] ; 35.data -> CMB3[0][0], CMB3.mode = seqsrcsink, detect_empty(CMB3), CMB3.active = CMB3[0][0] as 35, CMB3[1][9] -> CMB3.fifos, start(CMB3), connect(CMB3.output0, CP0.input0); nop, CMB3[0][0] -> 35.data, CMB3.fifos -> CMB3[1][9], save_pointers(CMB3));
        CMB4(36 in this[0][0] ; 36.data -> CMB4[0][0], CMB4.mode = seqsrcsink, detect_empty(CMB4), CMB4.active = CMB4[0][0] as 36, CMB4[1][9] -> CMB4.fifos, start(CMB4), connect(CMB4.output0, CP1.input0); nop, CMB4[0][0] -> 36.data, CMB4.fifos -> CMB4[1][9], save_pointers(CMB4));
        CMB5(37 in this[0][0] ; 37.data -> CMB5[0][0], CMB5.mode = seqsrcsink, detect_empty(CMB5), CMB5.active = CMB5[0][0] as 37, CMB5[1][9] -> CMB5.fifos, start(CMB5), connect(CMB5.output0, CP2.input0); );
        CMB6(44 in this[0][0] ; 44.data -> CMB6[0][0], CMB6.mode = seqsink, CMB6.active = CMB6[0][0] as 44, CMB6[1][9] -> CMB6.fifos, start(CMB6); );
        CMB7(45 in this[0][0] ; 45.data -> CMB7[0][0], CMB7.mode = seqsink, detect_full(CMB7), CMB7.active = CMB7[0][0] as 45, CMB7[1][9] -> CMB7.fifos, start(CMB7); );
        CMB8(46 in this[0][0] ; 46.data -> CMB8[0][0], CMB8.mode = seqsink, CMB8.active = CMB8[0][0] as 46, CMB8[1][9] -> CMB8.fifos, start(CMB8); );
    }

    timeslice 2 {
        CP0(7 ; CMB2[1][7] -> CP0.config, CMB2[1][7] -> CP0.state, CMB2[1][7] -> CP0.fifos, start(CP0), connect(CP0.output0, CP4.input1), connect(CP0.output1, CP0.input2), connect(CP0.output2, CP0.input3); nop, CP0.state -> CMB2[1][7], CP0.fifos -> CMB2[1][7]);
        CP1(4 ; CMB3[1][7] -> CP1.config, CMB3[1][7] -> CP1.state, CMB3[1][7] -> CP1.fifos, start(CP1), connect(CP1.output0, CP6.input1), connect(CP1.output1, CP1.input2), connect(CP1.output2, CP1.input3); nop, CP1.state -> CMB3[1][7], CP1.fifos -> CMB3[1][7]);
        CP2(8 ; CMB4[1][7] -> CP2.config, CMB4[1][7] -> CP2.state, CMB4[1][7] -> CP2.fifos, start(CP2), connect(CP2.output0, CP3.input0); nop, CP2.state -> CMB4[1][7], CP2.fifos -> CMB4[1][7]);
        CP3(6 ; CMB5[1][7] -> CP3.config, CMB5[1][7] -> CP3.state, CMB5[1][7] -> CP3.fifos, start(CP3), connect(CP3.output0, CP4.input0), connect(CP3.output1, CP3.input2), connect(CP3.output2, CP3.input3); nop, CP3.state -> CMB5[1][7], CP3.fifos -> CMB5[1][7]);
        CP4(5 ; CMB6[1][7] -> CP4.config, CMB6[1][7] -> CP4.state, CMB6[1][7] -> CP4.fifos, start(CP4), connect(CP4.output0, CP5.input0); nop, CP4.state -> CMB6[1][7], CP4.fifos -> CMB6[1][7]);
        CP5(3 ; CMB7[1][7] -> CP5.config, CMB7[1][7] -> CP5.state, CMB7[1][7] -> CP5.fifos, start(CP5), connect(CP5.output0, CP6.input0), connect(CP5.output1, CP5.input2), connect(CP5.output2, CP5.input3); nop, CP5.state -> CMB7[1][7], CP5.fifos -> CMB7[1][7]);
        CP6(2 ; CMB8[1][7] -> CP6.config, CMB8[1][7] -> CP6.state, CMB8[1][7] -> CP6.fifos, start(CP6), connect(CP6.output0, CP7.input0); nop, CP6.state -> CMB8[1][7], CP6.fifos -> CMB8[1][7]);
        CP7(1 ; 1.config -> CMB0[1][11], 1.state -> CMB0[1][11], 1.fifos -> CMB0[1][11], CMB0[1][11] -> CP7.config, CMB0[1][11] -> CP7.state, CMB0[1][11] -> CP7.fifos, start(CP7), connect(CP7.output0, CP8.input0), connect(CP7.output1, CP7.input1), connect(CP7.output2, CP7.input2), connect(CP7.output3, CP7.input3); nop, CP7.state -> CMB0[1][11], CP7.fifos -> CMB0[1][11]);
        CP8(0 ; 0.config -> CMB1[1][11], 0.state -> CMB1[1][11], 0.fifos -> CMB1[1][11], CMB1[1][11] -> CP8.config, CMB1[1][11] -> CP8.state, CMB1[1][11] -> CP8.fifos, start(CP8), connect(CP8.output0, CMB0.input0); nop, CP8.state -> CMB1[1][11], CP8.fifos -> CMB1[1][11]);
        CMB0(33 in this[0][0] ; 33.data -> CMB0[0][0], CMB0.mode = seqsrcsink, detect_full(CMB0), CMB0.active = CMB0[0][0] as 33, CMB0[1][7] -> CMB0.fifos, start(CMB0); nop, CMB0[0][0] -> 33.data, CMB0.fifos -> CMB0[1][7], save_pointers(CMB0));
        CMB1(34 in this[0][0] ; 34.data -> CMB1[0][0], CMB1.mode = seqsrcsink, detect_empty(CMB1), CMB1.active = CMB1[0][0] as 34, CMB1[1][7] -> CMB1.fifos, start(CMB1), connect(CMB1.output0, CP2.input0); nop, CMB1[0][0] -> 34.data, CMB1.fifos -> CMB1[1][7], save_pointers(CMB1));
        CMB2(41 in this[0][0] ; 41.data -> CMB2[0][0], CMB2.mode = seqsrcsink, detect_empty(CMB2), CMB2.active = CMB2[0][0] as 41, CMB6[1][11] -> CMB2.fifos, start(CMB2), connect(CMB2.output0, CP1.input0); nop, CMB2[0][0] -> 41.data, CMB2.fifos -> CMB6[1][11], save_pointers(CMB2));
        CMB3(42 in this[0][0] ; 42.data -> CMB3[0][0], CMB3.mode = seqsrcsink, CMB3.active = CMB3[0][0] as 42, CMB7[1][11] -> CMB3.fifos, start(CMB3), connect(CMB3.output0, CP5.input1); nop, CMB3[0][0] -> 42.data, CMB3.fifos -> CMB7[1][11], save_pointers(CMB3));
        CMB4(43 in this[0][0] ; 43.data -> CMB4[0][0], CMB4.mode = seqsrcsink, CMB4.active = CMB4[0][0] as 43, CMB8[1][11] -> CMB4.fifos, start(CMB4), connect(CMB4.output0, CP1.input1); nop, CMB4[0][0] -> 43.data, CMB4.fifos -> CMB8[1][11], save_pointers(CMB4));
        CMB5( ; ; nop, CMB5[0][0] -> 37.data, CMB5.fifos -> CMB5[1][9], save_pointers(CMB5));
        CMB6(44 in this[0][0] ; CMB6.mode = seqsrcsink, start(CMB6), connect(CMB6.output0, CP0.input0); nop, CMB6[0][0] -> 44.data, CMB6.fifos -> CMB6[1][9], save_pointers(CMB6));
        CMB7(45 in this[0][0] ; CMB7.mode = seqsrcsink, start(CMB7), connect(CMB7.output0, CP3.input1); nop, CMB7[0][0] -> 45.data, CMB7.fifos -> CMB7[1][9], save_pointers(CMB7));
        CMB8(46 in this[0][0] ; CMB8.mode = seqsrcsink, start(CMB8), connect(CMB8.output0, CP0.input1); nop, CMB8[0][0] -> 46.data, CMB8.fifos -> CMB8[1][9], save_pointers(CMB8));
    }

}
