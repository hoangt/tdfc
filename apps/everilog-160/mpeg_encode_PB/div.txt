//////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 1999 The Regents of the University of California 
// Permission to use, copy, modify, and distribute this software and
// its documentation for any purpose, without fee, and without a
// written agreement is hereby granted, provided that the above copyright 
// notice and this paragraph and the following two paragraphs appear in
// all copies. 
//
// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
// DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
// LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,
// EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. 
//
// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON
// AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
// PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS. 
//
//////////////////////////////////////////////////////////////////////////////
//
// - TDF Macros for division by a constant integer:  DIV, DIVRND
// - Eylon Caspi, 6/26/03
//
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
//									//
// - To enable DIV, define APPROX_DIV, otherwise DIV defaults to "/"	//
//									//
//////////////////////////////////////////////////////////////////////////

#ifndef APPROX_DIV
#define DIV(n,d)       ((n)/(d))
#define DIVRND(n,d) ((2*(n)/(d) + 1) / 2)
#else


// - NUMBITS(x) = (number of significant bits in unsigned[32] x)
// - Equivalent prototype:
//     unsigned[5] NUMBITS (input unsigned[32] x) ;
// - Result will constant-fold into a constant, given constant x
// - DO NOT use with dynamic x

#define NUMBITS(x)	(((x)    ==0) ? 0  : \
			 ((x)>>1 ==0) ? 1  : \
			 ((x)>>2 ==0) ? 2  : \
			 ((x)>>3 ==0) ? 3  : \
			 ((x)>>4 ==0) ? 4  : \
			 ((x)>>5 ==0) ? 5  : \
			 ((x)>>6 ==0) ? 6  : \
			 ((x)>>7 ==0) ? 7  : \
			 ((x)>>8 ==0) ? 8  : \
			 ((x)>>9 ==0) ? 9  : \
			 ((x)>>10==0) ? 10 : \
			 ((x)>>11==0) ? 11 : \
			 ((x)>>12==0) ? 12 : \
			 ((x)>>13==0) ? 13 : \
			 ((x)>>14==0) ? 14 : \
			 ((x)>>15==0) ? 15 : \
			 ((x)>>16==0) ? 16 : \
			 ((x)>>17==0) ? 17 : \
			 ((x)>>18==0) ? 18 : \
			 ((x)>>19==0) ? 19 : \
			 ((x)>>20==0) ? 20 : \
			 ((x)>>21==0) ? 21 : \
			 ((x)>>22==0) ? 22 : \
			 ((x)>>23==0) ? 23 : \
			 ((x)>>24==0) ? 24 : \
			 ((x)>>25==0) ? 25 : \
			 ((x)>>26==0) ? 26 : \
			 ((x)>>27==0) ? 27 : \
			 ((x)>>28==0) ? 28 : \
			 ((x)>>29==0) ? 29 : \
			 ((x)>>30==0) ? 30 : \
			       31           )

// - LOG2(x) = floor(log2(x),
//             i.e. number of significant bits in unsigned[32] x,
//             unless x is a power of 2, in which case
//             LOG2(x) is one less than the number of significant bits in x.
// - LOG2(0) = 0,  even though real log(0) is undefined
// - Equivalent prototype:
//     unsigned[5] LOG2 (input unsigned[32] x) ;
// - Result will constant-fold into a constant, given constant x
// - DO NOT use with dynamic x

#define LOG2(x)		((((x)  )    ==0) ? 0  : \
			 (((x)-1)>>0 ==0) ? 0  : \
			 (((x)-1)>>1 ==0) ? 1  : \
			 (((x)-1)>>2 ==0) ? 2  : \
			 (((x)-1)>>3 ==0) ? 3  : \
			 (((x)-1)>>4 ==0) ? 4  : \
			 (((x)-1)>>5 ==0) ? 5  : \
			 (((x)-1)>>6 ==0) ? 6  : \
			 (((x)-1)>>7 ==0) ? 7  : \
			 (((x)-1)>>8 ==0) ? 8  : \
			 (((x)-1)>>9 ==0) ? 9  : \
			 (((x)-1)>>10==0) ? 10 : \
			 (((x)-1)>>11==0) ? 11 : \
			 (((x)-1)>>12==0) ? 12 : \
			 (((x)-1)>>13==0) ? 13 : \
			 (((x)-1)>>14==0) ? 14 : \
			 (((x)-1)>>15==0) ? 15 : \
			 (((x)-1)>>16==0) ? 16 : \
			 (((x)-1)>>17==0) ? 17 : \
			 (((x)-1)>>18==0) ? 18 : \
			 (((x)-1)>>19==0) ? 19 : \
			 (((x)-1)>>20==0) ? 20 : \
			 (((x)-1)>>21==0) ? 21 : \
			 (((x)-1)>>22==0) ? 22 : \
			 (((x)-1)>>23==0) ? 23 : \
			 (((x)-1)>>24==0) ? 24 : \
			 (((x)-1)>>25==0) ? 25 : \
			 (((x)-1)>>26==0) ? 26 : \
			 (((x)-1)>>27==0) ? 27 : \
			 (((x)-1)>>28==0) ? 28 : \
			 (((x)-1)>>29==0) ? 29 : \
			 (((x)-1)>>30==0) ? 30 : \
			                    31 )


// - POWEROF2(n) = 2**n
// - Unsigned arithmetic, n>=0
// - n may be dynamic

#define POWEROF2(n) ( ((unsigned[(n)+1])1) << (n) )


// - DIVCONSTS(e,d) = (2*e/d + 1) / 2
// - Divide constant by constant, with rounding
// - Unsigned arithmetic, d>0

#define DIVCONSTS(e,d) ((2*(e)/(d)+1)/2)


// - DIV(n/d)    =   n/d
// - DIVRND(n/d) = (2n/d+1)/2
// - Divide by constant, implemented as multiply by constant and right shift
// - Without rounding:
//     DIV(n,d)    = (n / d)    ~== (n * k / (2**s))
//                               == (n * k >> s)
// - With rounding:
//     DIVRND(n,d) = (2n/d+1)/2 ~== (((n * k + 2**(s-1)) / (2**s))
//                               == (((n * k + 2**(s-1)) >> s)
//                               == (((n * k >> (s-1)) + 1) >> 1)
// - Unsigned arithmetic
// - Assume d>0,  d constant
// - n may be dynamic
// - Derivation:
//     * conserve precision:  width(n/d) = width(n*k>>s)
//                     width(n)-width(d) = width(n)+width(k)-s
//                              width(d) = s-width(k)
//     * choose:       width(k) = width(d)  -->  s = 2*width(d),  k = (2**s)/d
//     * dynamically:    log(k) =   log(d)  -->  s = 2*log(d),    k = (2**s)/d
// - k is truncated, i.e. always rounded down, which may increase error
// - if d is power of 2, this macro does the dumb thing
//     of multiplying by a power of 2 and shifting;  multiply not needed

#define DIV_S__(n,d)  (2*LOG2(d))
#define DIV_K__(n,d)  (POWEROF2(DIV_S__(n,d)) / (d))
#define DIV__(n,d)    (   (n) * DIV_K__(n,d) >>  DIV_S__(n,d) )
#define DIVRND__(n,d) ( (((n) * DIV_K__(n,d) >> (DIV_S__(n,d)-1)) + 1) >> 1 )


// - This version computes k with an extra bit of precision
//     and rounds k to the nearest whole instead of truncating
// - k = (e/d) --> (e/d + 1/2) = (2e/d + 1)/2      (where e = 2**s)

#define DIV_S_(n,d)  (2*LOG2(d))
#define DIV_K_(n,d)  DIVCONSTS(POWEROF2(DIV_S__(n,d)),(d))
#define DIV_(n,d)    (   (n) * DIV_K_(n,d) >>  DIV_S_(n,d) )
#define DIVRND_(n,d) ( (((n) * DIV_K_(n,d) >> (DIV_S_(n,d)-1)) + 1) >> 1 )


// - This version is more efficient to constant-fold,
//     as it inlines a custom version of POWEROF2 to avoid one eval of LOG2
// - But it may generate a wider result type

#define POWEROF2_2LOG2(d) ( ((unsigned[2*(widthof(d))+1])1) << (2*LOG2(d)) )
#define DIV_S(n,d)  (2*LOG2(d))
#define DIV_K(n,d)  DIVCONSTS(POWEROF2_2LOG2(d),(d))
#define DIV(n,d)    (   (n) * DIV_K(n,d) >>  DIV_S(n,d) )
#define DIVRND(n,d) ( (((n) * DIV_K(n,d) >> (DIV_S(n,d)-1)) + 1) >> 1 )


#endif	// #ifndef APPROX_DIV
