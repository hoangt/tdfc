// schedc 1.3, Jul 30 2001 06:57:23
// filename = wavelet/new_sched/wavelet_11.template
//
// ---- SCHEDULE HEADER BEGIN ----
// Schedule generation options:
//    minIO clustering: false
//    ratefile name: wavelet/wavelet.ratefile
//    traversal type: exh
// 
//  0| 0, 1, 2, 3, 4, 7, 6, 5, 9, 8, 23, 35, 43, 44, 45, 46, 47, 48, 49, 50, 51, |use cp=1.00, cmb=0.91|utl cp=0.23|ave cp=0.23|drain=1.00
//  1| 22, 10, 21, 34, 11, 14, 33, 13, 12, 16, 15, 27, 17, 36, 40, 48, 49, 50, 52, 53, 54, 55, |use cp=1.00, cmb=1.00|utl cp=0.50|ave cp=0.50|drain=0.06
//  2| 19, 20, 18, 29, 31, 32, 30, 25, 26, 24, 37, 38, 39, 42, 51, 53, 54, 55, |use cp=0.64, cmb=1.00|utl cp=0.45|ave cp=0.71|drain=0.02
//  3| 28, 41, 52, |use cp=0.09, cmb=0.18|utl cp=0.09|ave cp=1.00|drain=0.00
// 
// ave|use cp=0.68, cmb=0.77|utl cp=0.32|ave cp=0.47
// 
// w_ave|utl cp=0.25
// ---- SCHEDULE HEADER END ----

array {
   CPs: 11;
   CMBs: 11;
   CMB Partitions:
    B0 (B0, B1, B2, B3, B4, B5, B6) :
    null (B7, B8, B9, B10, B11);
}
design {
    visual: "something";
    0: page (1, 1) "LiftWaveHD in LiftWaveHD.tdf" : 0.output0 => 1.input0, cpu.output0 => 0.input0 ;
    1: page (1, 3) "InWave in InWave.tdf" : 1.output0 =1000=> 2.input0, 1.output1 =1000=> 2.input1, 1.output2 =1000=> 2.input2 ;
    2: page (4, 2) "VWave in VWave.tdf" : 2.output0 => 3.input0, 2.output1 =1000=> 2.input3 ;
    3: page (1, 2) "LiftWaveH in LiftWaveH.tdf" : 3.output0 => 4.input0, 3.output1 => 7.input0 ;
    4: page (1, 3) "InWave in InWave.tdf" : 4.output0 => 5.input0, 4.output1 => 5.input1, 4.output2 => 5.input2 ;
    5: page (4, 2) "VWave in VWave.tdf" : 5.output0 => 10.input0, 5.output1 => 6.input0 ;
    6: page (1, 2) "repWave in repWave.tdf" : 6.output0 => 22.input0, 6.output1 => 5.input3 ;
    7: page (1, 3) "InWave in InWave.tdf" : 7.output0 => 8.input0, 7.output1 => 8.input1, 7.output2 => 8.input2 ;
    8: page (4, 2) "VWave in VWave.tdf" : 8.output0 => 21.input0, 8.output1 => 9.input0 ;
    9: page (1, 2) "repWave in repWave.tdf" : 9.output0 => 23.input0, 9.output1 => 8.input3 ;
    10: page (1, 2) "LiftWaveH in LiftWaveH.tdf" : 10.output0 => 11.input0, 10.output1 => 14.input0 ;
    11: page (1, 3) "InWave in InWave.tdf" : 11.output0 => 12.input0, 11.output1 => 12.input1, 11.output2 => 12.input2 ;
    12: page (4, 2) "VWave in VWave.tdf" : 12.output0 => 17.input0, 12.output1 => 13.input0 ;
    13: page (1, 2) "repWave in repWave.tdf" : 13.output0 => 19.input0, 13.output1 => 12.input3 ;
    14: page (1, 3) "InWave in InWave.tdf" : 14.output0 => 15.input0, 14.output1 => 15.input1, 14.output2 => 15.input2 ;
    15: page (4, 2) "VWave in VWave.tdf" : 15.output0 => 18.input0, 15.output1 => 16.input0 ;
    16: page (1, 2) "repWave in repWave.tdf" : 16.output0 => 20.input0, 16.output1 => 15.input3 ;
    17: page (1, 1) "Quant_DC in Quant_DC.tdf" : 17.output0 => cpu.input0 ;
    18: page (1, 1) "__Quant_ZLE in __Quant_ZLE.tdf" : 18.output0 => 30.input0 ;
    19: page (1, 1) "__Quant_ZLE in __Quant_ZLE.tdf" : 19.output0 => 31.input0 ;
    20: page (1, 1) "__Quant_ZLE in __Quant_ZLE.tdf" : 20.output0 => 32.input0 ;
    21: page (1, 1) "__Quant_ZLE in __Quant_ZLE.tdf" : 21.output0 => 33.input0 ;
    22: page (1, 1) "__Quant_ZLE in __Quant_ZLE.tdf" : 22.output0 => 34.input0 ;
    23: page (1, 1) "__Quant_ZLE in __Quant_ZLE.tdf" : 23.output0 => 35.input0 ;
    24: page (1, 1) "__HuffMachine in __HuffMachine.tdf" : 24.output0 => cpu.input1 ;
    25: page (1, 1) "__HuffMachine in __HuffMachine.tdf" : 25.output0 => cpu.input2 ;
    26: page (1, 1) "__HuffMachine in __HuffMachine.tdf" : 26.output0 => cpu.input3 ;
    27: page (1, 1) "__HuffMachine in __HuffMachine.tdf" : 27.output0 => cpu.input4 ;
    28: page (1, 1) "__HuffMachine in __HuffMachine.tdf" : 28.output0 => cpu.input5 ;
    29: page (1, 1) "__HuffMachine in __HuffMachine.tdf" : 29.output0 => cpu.input6 ;
    30: segment (1, 1) "Segment" : 30.output0 => 24.input0 ;
    31: segment (1, 1) "Segment" : 31.output0 => 25.input0 ;
    32: segment (1, 1) "Segment" : 32.output0 => 26.input0 ;
    33: segment (1, 1) "Segment" : 33.output0 => 27.input0 ;
    34: segment (1, 1) "Segment" : 34.output0 => 28.input0 ;
    35: segment (1, 1) "Segment" : 35.output0 => 29.input0 ;
    insert stitch segment 36 between 17.output0 and cpu;
    insert stitch segment 37 between 24.output0 and cpu;
    insert stitch segment 38 between 25.output0 and cpu;
    insert stitch segment 39 between 26.output0 and cpu;
    insert stitch segment 40 between 27.output0 and cpu;
    insert stitch segment 41 between 28.output0 and cpu;
    insert stitch segment 42 between 29.output0 and cpu;
    insert stitch segment 43 between cpu.output0 and 0;
    insert stitch segment 44 between 1.output0 and 2;
    insert stitch segment 45 between 1.output1 and 2;
    insert stitch segment 46 between 1.output2 and 2;
    insert stitch segment 47 between 2.output1 and 2;
    insert stitch segment 48 between 6.output0 and 22;
    insert stitch segment 49 between 5.output0 and 10;
    insert stitch segment 50 between 8.output0 and 21;
    insert stitch segment 51 between 35.output0 and 29;
    insert stitch segment 52 between 34.output0 and 28;
    insert stitch segment 53 between 13.output0 and 19;
    insert stitch segment 54 between 16.output0 and 20;
    insert stitch segment 55 between 15.output0 and 18;
}
schedule {
    pre {
        CP0( ; 0.config -> CMB10[1][11], 0.state -> CMB10[1][11], 0.fifos -> CMB10[1][11], 22.config -> CMB7[1][9], 22.state -> CMB7[1][9], 22.fifos -> CMB7[1][9], 19.config -> CMB3[1][7], 19.state -> CMB3[1][7], 19.fifos -> CMB3[1][7]; nop);
        CP1( ; 1.config -> CMB0[1][10], 1.state -> CMB0[1][10], 1.fifos -> CMB0[1][10], 10.config -> CMB8[1][9], 10.state -> CMB8[1][9], 10.fifos -> CMB8[1][9], 20.config -> CMB4[1][7], 20.state -> CMB4[1][7], 20.fifos -> CMB4[1][7]; nop);
        CP2( ; 2.config -> CMB1[1][10], 2.state -> CMB1[1][10], 2.fifos -> CMB1[1][10], 21.config -> CMB9[1][9], 21.state -> CMB9[1][9], 21.fifos -> CMB9[1][9], 18.config -> CMB5[1][7], 18.state -> CMB5[1][7], 18.fifos -> CMB5[1][7]; nop);
        CP3( ; 3.config -> CMB2[1][10], 3.state -> CMB2[1][10], 3.fifos -> CMB2[1][10], 11.config -> CMB10[1][9], 11.state -> CMB10[1][9], 11.fifos -> CMB10[1][9], 29.config -> CMB6[1][7], 29.state -> CMB6[1][7], 29.fifos -> CMB6[1][7]; nop);
        CP4( ; 4.config -> CMB3[1][10], 4.state -> CMB3[1][10], 4.fifos -> CMB3[1][10], 14.config -> CMB0[1][8], 14.state -> CMB0[1][8], 14.fifos -> CMB0[1][8], 25.config -> CMB7[1][7], 25.state -> CMB7[1][7], 25.fifos -> CMB7[1][7]; nop);
        CP5( ; 7.config -> CMB4[1][10], 7.state -> CMB4[1][10], 7.fifos -> CMB4[1][10], 13.config -> CMB1[1][8], 13.state -> CMB1[1][8], 13.fifos -> CMB1[1][8], 26.config -> CMB8[1][7], 26.state -> CMB8[1][7], 26.fifos -> CMB8[1][7]; nop);
        CP6( ; 6.config -> CMB5[1][10], 6.state -> CMB5[1][10], 6.fifos -> CMB5[1][10], 12.config -> CMB2[1][8], 12.state -> CMB2[1][8], 12.fifos -> CMB2[1][8], 24.config -> CMB9[1][7], 24.state -> CMB9[1][7], 24.fifos -> CMB9[1][7]; nop);
        CP7( ; 5.config -> CMB6[1][10], 5.state -> CMB6[1][10], 5.fifos -> CMB6[1][10], 16.config -> CMB3[1][8], 16.state -> CMB3[1][8], 16.fifos -> CMB3[1][8]; nop);
        CP8( ; 9.config -> CMB7[1][10], 9.state -> CMB7[1][10], 9.fifos -> CMB7[1][10], 15.config -> CMB4[1][8], 15.state -> CMB4[1][8], 15.fifos -> CMB4[1][8]; nop);
        CP9( ; 8.config -> CMB8[1][10], 8.state -> CMB8[1][10], 8.fifos -> CMB8[1][10], 27.config -> CMB5[1][8], 27.state -> CMB5[1][8], 27.fifos -> CMB5[1][8]; nop);
        CP10( ; 23.config -> CMB9[1][10], 23.state -> CMB9[1][10], 23.fifos -> CMB9[1][10], 17.config -> CMB6[1][8], 17.state -> CMB6[1][8], 17.fifos -> CMB6[1][8]; nop);
        CMB0( ; ; nop, 33.fifos -> CMB0[1][9], 38.fifos -> CMB0[1][7]);
        CMB1( ; ; nop, 43.fifos -> CMB1[1][11], 36.fifos -> CMB1[1][9], 39.fifos -> CMB1[1][7]);
        CMB2( ; ; nop, 44.fifos -> CMB2[1][11], 40.fifos -> CMB2[1][9], 42.fifos -> CMB2[1][7]);
        CMB3( ; ; nop, 45.fifos -> CMB3[1][11], 52.fifos -> CMB3[1][9]);
        CMB4( ; ; nop, 46.fifos -> CMB4[1][11], 53.fifos -> CMB4[1][9]);
        CMB5( ; ; nop, 47.fifos -> CMB5[1][11], 54.fifos -> CMB5[1][9]);
        CMB6( ; ; nop, 48.fifos -> CMB6[1][11], 55.fifos -> CMB6[1][9]);
        CMB7( ; ; nop, 49.fifos -> CMB7[1][11], 31.fifos -> CMB7[1][8]);
        CMB8( ; ; nop, 50.fifos -> CMB8[1][11], 32.fifos -> CMB8[1][8]);
        CMB9( ; ; nop, 51.fifos -> CMB9[1][11], 30.fifos -> CMB9[1][8]);
        CMB10( ; ; 34.fifos -> CMB10[1][10], 37.fifos -> CMB10[1][8], 41.fifos -> CMB10[1][7]);
    }
    timeslice 0 {
        CP0(0 ; start(CP0), connect(CP0.output0, CP1.input0), CMB10[1][11] -> CP0.config, CMB10[1][11] -> CP0.state, CMB10[1][11] -> CP0.fifos; nop, CP0.state -> CMB10[1][11], CP0.fifos -> CMB10[1][11]);
        CP1(1 ; start(CP1), connect(CP1.output0, CMB2.input0), connect(CP1.output1, CMB3.input0), connect(CP1.output2, CMB4.input0), CMB0[1][10] -> CP1.config, CMB0[1][10] -> CP1.state, CMB0[1][10] -> CP1.fifos; nop, CP1.state -> CMB0[1][10], CP1.fifos -> CMB0[1][10]);
        CP2(2 ; start(CP2), connect(CP2.output0, CP3.input0), connect(CP2.output1, CMB5.input0), CMB1[1][10] -> CP2.config, CMB1[1][10] -> CP2.state, CMB1[1][10] -> CP2.fifos; nop, CP2.state -> CMB1[1][10], CP2.fifos -> CMB1[1][10]);
        CP3(3 ; start(CP3), connect(CP3.output0, CP4.input0), connect(CP3.output1, CP5.input0), CMB2[1][10] -> CP3.config, CMB2[1][10] -> CP3.state, CMB2[1][10] -> CP3.fifos; nop, CP3.state -> CMB2[1][10], CP3.fifos -> CMB2[1][10]);
        CP4(4 ; start(CP4), connect(CP4.output0, CP7.input0), connect(CP4.output1, CP7.input1), connect(CP4.output2, CP7.input2), CMB3[1][10] -> CP4.config, CMB3[1][10] -> CP4.state, CMB3[1][10] -> CP4.fifos; nop, CP4.state -> CMB3[1][10], CP4.fifos -> CMB3[1][10]);
        CP5(7 ; start(CP5), connect(CP5.output0, CP9.input0), connect(CP5.output1, CP9.input1), connect(CP5.output2, CP9.input2), CMB4[1][10] -> CP5.config, CMB4[1][10] -> CP5.state, CMB4[1][10] -> CP5.fifos; nop, CP5.state -> CMB4[1][10], CP5.fifos -> CMB4[1][10]);
        CP6(6 ; start(CP6), connect(CP6.output0, CMB6.input0), connect(CP6.output1, CP7.input3), CMB5[1][10] -> CP6.config, CMB5[1][10] -> CP6.state, CMB5[1][10] -> CP6.fifos; nop, CP6.state -> CMB5[1][10], CP6.fifos -> CMB5[1][10]);
        CP7(5 ; start(CP7), connect(CP7.output0, CMB7.input0), connect(CP7.output1, CP6.input0), CMB6[1][10] -> CP7.config, CMB6[1][10] -> CP7.state, CMB6[1][10] -> CP7.fifos; nop, CP7.state -> CMB6[1][10], CP7.fifos -> CMB6[1][10]);
        CP8(9 ; start(CP8), connect(CP8.output0, CP10.input0), connect(CP8.output1, CP9.input3), CMB7[1][10] -> CP8.config, CMB7[1][10] -> CP8.state, CMB7[1][10] -> CP8.fifos; nop, CP8.state -> CMB7[1][10], CP8.fifos -> CMB7[1][10]);
        CP9(8 ; start(CP9), connect(CP9.output0, CMB8.input0), connect(CP9.output1, CP8.input0), CMB8[1][10] -> CP9.config, CMB8[1][10] -> CP9.state, CMB8[1][10] -> CP9.fifos; nop, CP9.state -> CMB8[1][10], CP9.fifos -> CMB8[1][10]);
        CP10(23 ; start(CP10), connect(CP10.output0, CMB0.input0), CMB9[1][10] -> CP10.config, CMB9[1][10] -> CP10.state, CMB9[1][10] -> CP10.fifos; nop, CP10.state -> CMB9[1][10], CP10.fifos -> CMB9[1][10]);
        CMB0(35 in this[0][0] ; start(CMB0), connect(CMB0.output0, CMB9.input0), 35.data -> CMB0[0][0], CMB0.active = CMB0[0][0] as 35, CMB0[1][11] -> CMB0.fifos, 35.fifos -> CMB0[1][11]; nop, CMB0[0][0] -> 35.data, CMB0.fifos -> CMB0[1][11], save_pointers(CMB0));
        CMB1(43 in this[0][0] ; CMB1.mode = seqsrcsink, detect_empty(CMB1), start(CMB1), connect(CMB1.output0, CP0.input0), 43.data -> CMB1[0][0], CMB1.active = CMB1[0][0] as 43, CMB1[1][11] -> CMB1.fifos; nop, CMB1[0][0] -> 43.data, CMB1.fifos -> CMB1[1][11], save_pointers(CMB1));
        CMB2(44 in this[0][0] ; CMB2.mode = seqsrcsink, start(CMB2), connect(CMB2.output0, CP2.input0), 44.data -> CMB2[0][0], CMB2.active = CMB2[0][0] as 44, CMB2[1][11] -> CMB2.fifos; nop, CMB2[0][0] -> 44.data, CMB2.fifos -> CMB2[1][11], save_pointers(CMB2));
        CMB3(45 in this[0][0] ; CMB3.mode = seqsrcsink, start(CMB3), connect(CMB3.output0, CP2.input1), 45.data -> CMB3[0][0], CMB3.active = CMB3[0][0] as 45, CMB3[1][11] -> CMB3.fifos; nop, CMB3[0][0] -> 45.data, CMB3.fifos -> CMB3[1][11], save_pointers(CMB3));
        CMB4(46 in this[0][0] ; CMB4.mode = seqsrcsink, start(CMB4), connect(CMB4.output0, CP2.input2), 46.data -> CMB4[0][0], CMB4.active = CMB4[0][0] as 46, CMB4[1][11] -> CMB4.fifos; nop, CMB4[0][0] -> 46.data, CMB4.fifos -> CMB4[1][11], save_pointers(CMB4));
        CMB5(47 in this[0][0] ; CMB5.mode = seqsrcsink, start(CMB5), connect(CMB5.output0, CP2.input3), 47.data -> CMB5[0][0], CMB5.active = CMB5[0][0] as 47, CMB5[1][11] -> CMB5.fifos; nop, CMB5[0][0] -> 47.data, CMB5.fifos -> CMB5[1][11], save_pointers(CMB5));
        CMB6(48 in this[0][0] ; CMB6.mode = seqsink, detect_full(CMB6), start(CMB6), 48.data -> CMB6[0][0], CMB6.active = CMB6[0][0] as 48, CMB6[1][11] -> CMB6.fifos; );
        CMB7(49 in this[0][0] ; CMB7.mode = seqsink, start(CMB7), 49.data -> CMB7[0][0], CMB7.active = CMB7[0][0] as 49, CMB7[1][11] -> CMB7.fifos; );
        CMB8(50 in this[0][0] ; CMB8.mode = seqsink, start(CMB8), 50.data -> CMB8[0][0], CMB8.active = CMB8[0][0] as 50, CMB8[1][11] -> CMB8.fifos; );
        CMB9(51 in this[0][0] ; CMB9.mode = seqsink, start(CMB9), 51.data -> CMB9[0][0], CMB9.active = CMB9[0][0] as 51, CMB9[1][11] -> CMB9.fifos; nop, CMB9[0][0] -> 51.data, CMB9.fifos -> CMB9[1][11], save_pointers(CMB9));
        CMB10( ; ; nop);
    }

    timeslice 1 {
        CP0(22 ; CMB7[1][9] -> CP0.config, CMB7[1][9] -> CP0.state, CMB7[1][9] -> CP0.fifos, start(CP0), connect(CP0.output0, CMB10.input0); nop, CP0.state -> CMB7[1][9], CP0.fifos -> CMB7[1][9]);
        CP1(10 ; CMB8[1][9] -> CP1.config, CMB8[1][9] -> CP1.state, CMB8[1][9] -> CP1.fifos, start(CP1), connect(CP1.output0, CP3.input0), connect(CP1.output1, CP4.input0); nop, CP1.state -> CMB8[1][9], CP1.fifos -> CMB8[1][9]);
        CP2(21 ; CMB9[1][9] -> CP2.config, CMB9[1][9] -> CP2.state, CMB9[1][9] -> CP2.fifos, start(CP2), connect(CP2.output0, CMB0.input0); nop, CP2.state -> CMB9[1][9], CP2.fifos -> CMB9[1][9]);
        CP3(11 ; CMB10[1][9] -> CP3.config, CMB10[1][9] -> CP3.state, CMB10[1][9] -> CP3.fifos, start(CP3), connect(CP3.output0, CP6.input0), connect(CP3.output1, CP6.input1), connect(CP3.output2, CP6.input2); nop, CP3.state -> CMB10[1][9], CP3.fifos -> CMB10[1][9]);
        CP4(14 ; CMB0[1][8] -> CP4.config, CMB0[1][8] -> CP4.state, CMB0[1][8] -> CP4.fifos, start(CP4), connect(CP4.output0, CP8.input0), connect(CP4.output1, CP8.input1), connect(CP4.output2, CP8.input2); nop, CP4.state -> CMB0[1][8], CP4.fifos -> CMB0[1][8]);
        CP5(13 ; CMB1[1][8] -> CP5.config, CMB1[1][8] -> CP5.state, CMB1[1][8] -> CP5.fifos, start(CP5), connect(CP5.output0, CMB4.input0), connect(CP5.output1, CP6.input3); nop, CP5.state -> CMB1[1][8], CP5.fifos -> CMB1[1][8]);
        CP6(12 ; CMB2[1][8] -> CP6.config, CMB2[1][8] -> CP6.state, CMB2[1][8] -> CP6.fifos, start(CP6), connect(CP6.output0, CP10.input0), connect(CP6.output1, CP5.input0); nop, CP6.state -> CMB2[1][8], CP6.fifos -> CMB2[1][8]);
        CP7(16 ; CMB3[1][8] -> CP7.config, CMB3[1][8] -> CP7.state, CMB3[1][8] -> CP7.fifos, start(CP7), connect(CP7.output0, CMB5.input0), connect(CP7.output1, CP8.input3); );
        CP8(15 ; CMB4[1][8] -> CP8.config, CMB4[1][8] -> CP8.state, CMB4[1][8] -> CP8.fifos, start(CP8), connect(CP8.output0, CMB9.input0), connect(CP8.output1, CP7.input0); );
        CP9(27 ; CMB5[1][8] -> CP9.config, CMB5[1][8] -> CP9.state, CMB5[1][8] -> CP9.fifos, start(CP9), connect(CP9.output0, CMB2.input0); );
        CP10(17 ; CMB6[1][8] -> CP10.config, CMB6[1][8] -> CP10.state, CMB6[1][8] -> CP10.fifos, start(CP10), connect(CP10.output0, CMB1.input0); );
        CMB0(33 in this[0][0] ; 33.data -> CMB0[0][0], CMB0.active = CMB0[0][0] as 33, CMB0[1][9] -> CMB0.fifos, start(CMB0), connect(CMB0.output0, CP9.input0); nop, CMB0[0][0] -> 33.data, CMB0.fifos -> CMB0[1][9], save_pointers(CMB0));
        CMB1(36 in this[0][0] ; 36.data -> CMB1[0][0], CMB1.mode = seqsrcsink, detect_full(CMB1), CMB1.active = CMB1[0][0] as 36, CMB1[1][9] -> CMB1.fifos, start(CMB1); nop, CMB1[0][0] -> 36.data, CMB1.fifos -> CMB1[1][9], save_pointers(CMB1));
        CMB2(40 in this[0][0] ; 40.data -> CMB2[0][0], CMB2.mode = seqsrcsink, detect_full(CMB2), CMB2.active = CMB2[0][0] as 40, CMB2[1][9] -> CMB2.fifos, start(CMB2); nop, CMB2[0][0] -> 40.data, CMB2.fifos -> CMB2[1][9], save_pointers(CMB2));
        CMB3(52 in this[0][0] ; 52.data -> CMB3[0][0], CMB3.mode = seqsink, CMB3.active = CMB3[0][0] as 52, CMB3[1][9] -> CMB3.fifos, start(CMB3); nop, CMB3[0][0] -> 52.data, CMB3.fifos -> CMB3[1][9], save_pointers(CMB3));
        CMB4(53 in this[0][0] ; 53.data -> CMB4[0][0], CMB4.mode = seqsink, CMB4.active = CMB4[0][0] as 53, CMB4[1][9] -> CMB4.fifos, start(CMB4); );
        CMB5(54 in this[0][0] ; 54.data -> CMB5[0][0], CMB5.mode = seqsink, CMB5.active = CMB5[0][0] as 54, CMB5[1][9] -> CMB5.fifos, start(CMB5); );
        CMB6(48 in this[0][0] ; CMB6.mode = seqsrcsink, start(CMB6), connect(CMB6.output0, CP0.input0); nop, CMB6[0][0] -> 48.data, CMB6.fifos -> CMB6[1][11], save_pointers(CMB6));
        CMB7(49 in this[0][0] ; CMB7.mode = seqsrcsink, start(CMB7), connect(CMB7.output0, CP1.input0); nop, CMB7[0][0] -> 49.data, CMB7.fifos -> CMB7[1][11], save_pointers(CMB7));
        CMB8(50 in this[0][0] ; CMB8.mode = seqsrcsink, detect_empty(CMB8), start(CMB8), connect(CMB8.output0, CP2.input0); nop, CMB8[0][0] -> 50.data, CMB8.fifos -> CMB8[1][11], save_pointers(CMB8));
        CMB9(55 in this[0][0] ; 55.data -> CMB9[0][0], CMB9.mode = seqsink, CMB9.active = CMB9[0][0] as 55, CMB6[1][9] -> CMB9.fifos, start(CMB9); );
        CMB10(34 in this[0][0] ; start(CMB10), connect(CMB10.output0, CMB3.input0), 34.data -> CMB10[0][0], CMB10.active = CMB10[0][0] as 34, CMB10[1][10] -> CMB10.fifos; nop, CMB10[0][0] -> 34.data, CMB10.fifos -> CMB10[1][10], save_pointers(CMB10));
    }

    timeslice 2 {
        CP0(19 ; CMB3[1][7] -> CP0.config, CMB3[1][7] -> CP0.state, CMB3[1][7] -> CP0.fifos, start(CP0), connect(CP0.output0, CMB10.input0); nop, CP0.state -> CMB3[1][7], CP0.fifos -> CMB3[1][7], CMB0[1][11] -> 35.fifos);
        CP1(20 ; CMB4[1][7] -> CP1.config, CMB4[1][7] -> CP1.state, CMB4[1][7] -> CP1.fifos, start(CP1), connect(CP1.output0, CMB0.input0); );
        CP2(18 ; CMB5[1][7] -> CP2.config, CMB5[1][7] -> CP2.state, CMB5[1][7] -> CP2.fifos, start(CP2), connect(CP2.output0, CMB1.input0); );
        CP3(29 ; CMB6[1][7] -> CP3.config, CMB6[1][7] -> CP3.state, CMB6[1][7] -> CP3.fifos, start(CP3), connect(CP3.output0, CMB7.input0); );
        CP4(25 ; CMB7[1][7] -> CP4.config, CMB7[1][7] -> CP4.state, CMB7[1][7] -> CP4.fifos, start(CP4), connect(CP4.output0, CMB3.input0); );
        CP5(26 ; CMB8[1][7] -> CP5.config, CMB8[1][7] -> CP5.state, CMB8[1][7] -> CP5.fifos, start(CP5), connect(CP5.output0, CMB6.input0); );
        CP6(24 ; CMB9[1][7] -> CP6.config, CMB9[1][7] -> CP6.state, CMB9[1][7] -> CP6.fifos, start(CP6), connect(CP6.output0, CMB2.input0); );
        CMB0(32 in this[0][0] ; 32.data -> CMB0[0][0], CMB0.active = CMB0[0][0] as 32, CMB8[1][8] -> CMB0.fifos, start(CMB0), connect(CMB0.output0, CP5.input0); );
        CMB1(30 in this[0][0] ; 30.data -> CMB1[0][0], CMB1.active = CMB1[0][0] as 30, CMB9[1][8] -> CMB1.fifos, start(CMB1), connect(CMB1.output0, CP6.input0); );
        CMB2(37 in this[0][0] ; 37.data -> CMB2[0][0], CMB2.mode = seqsrcsink, detect_full(CMB2), CMB2.active = CMB2[0][0] as 37, CMB10[1][8] -> CMB2.fifos, start(CMB2); );
        CMB3(38 in this[0][0] ; 38.data -> CMB3[0][0], CMB3.mode = seqsrcsink, detect_full(CMB3), CMB3.active = CMB3[0][0] as 38, CMB0[1][7] -> CMB3.fifos, start(CMB3); );
        CMB4(53 in this[0][0] ; CMB4.mode = seqsrcsink, start(CMB4), connect(CMB4.output0, CP0.input0); );
        CMB5(54 in this[0][0] ; CMB5.mode = seqsrcsink, start(CMB5), connect(CMB5.output0, CP1.input0); );
        CMB6(39 in this[0][0] ; 39.data -> CMB6[0][0], CMB6.mode = seqsrcsink, detect_full(CMB6), CMB6.active = CMB6[0][0] as 39, CMB1[1][7] -> CMB6.fifos, start(CMB6); );
        CMB7(42 in this[0][0] ; 42.data -> CMB7[0][0], CMB7.mode = seqsrcsink, detect_full(CMB7), CMB7.active = CMB7[0][0] as 42, CMB2[1][7] -> CMB7.fifos, start(CMB7); );
        CMB8(51 in this[0][0] ; 51.data -> CMB8[0][0], CMB8.mode = seqsrcsink, detect_empty(CMB8), CMB8.active = CMB8[0][0] as 51, CMB9[1][11] -> CMB8.fifos, start(CMB8), connect(CMB8.output0, CP3.input0); );
        CMB9(55 in this[0][0] ; CMB9.mode = seqsrcsink, start(CMB9), connect(CMB9.output0, CP2.input0); nop, CMB9[0][0] -> 55.data, CMB9.fifos -> CMB6[1][9], save_pointers(CMB9));
        CMB10(31 in this[0][0] ; 31.data -> CMB10[0][0], CMB10.active = CMB10[0][0] as 31, CMB7[1][8] -> CMB10.fifos, start(CMB10), connect(CMB10.output0, CP4.input0); nop, CMB10[0][0] -> 31.data, CMB10.fifos -> CMB7[1][8], save_pointers(CMB10));
    }

    timeslice 3 {
        CP0(28 ; 28.config -> CMB0[1][11], 28.state -> CMB0[1][11], 28.fifos -> CMB0[1][11], CMB0[1][11] -> CP0.config, CMB0[1][11] -> CP0.state, CMB0[1][11] -> CP0.fifos, start(CP0), connect(CP0.output0, CMB9.input0); nop, CP0.state -> CMB0[1][11], CP0.fifos -> CMB0[1][11]);
        CP1( ; ; nop, CP1.state -> CMB4[1][7], CP1.fifos -> CMB4[1][7]);
        CP2( ; ; nop, CP2.state -> CMB5[1][7], CP2.fifos -> CMB5[1][7]);
        CP3( ; ; nop, CP3.state -> CMB6[1][7], CP3.fifos -> CMB6[1][7]);
        CP4( ; ; nop, CP4.state -> CMB7[1][7], CP4.fifos -> CMB7[1][7]);
        CP5( ; ; nop, CP5.state -> CMB8[1][7], CP5.fifos -> CMB8[1][7]);
        CP6( ; ; nop, CP6.state -> CMB9[1][7], CP6.fifos -> CMB9[1][7]);
        CP7( ; ; nop, CP7.state -> CMB3[1][8], CP7.fifos -> CMB3[1][8]);
        CP8( ; ; nop, CP8.state -> CMB4[1][8], CP8.fifos -> CMB4[1][8]);
        CP9( ; ; nop, CP9.state -> CMB5[1][8], CP9.fifos -> CMB5[1][8]);
        CP10( ; ; nop, CP10.state -> CMB6[1][8], CP10.fifos -> CMB6[1][8]);
        CMB0( ; ; nop, CMB0[0][0] -> 32.data, CMB0.fifos -> CMB8[1][8], save_pointers(CMB0));
        CMB1( ; ; nop, CMB1[0][0] -> 30.data, CMB1.fifos -> CMB9[1][8], save_pointers(CMB1));
        CMB2( ; ; nop, CMB2[0][0] -> 37.data, CMB2.fifos -> CMB10[1][8], save_pointers(CMB2));
        CMB3( ; ; nop, CMB3[0][0] -> 38.data, CMB3.fifos -> CMB0[1][7], save_pointers(CMB3));
        CMB4( ; ; nop, CMB4[0][0] -> 53.data, CMB4.fifos -> CMB4[1][9], save_pointers(CMB4));
        CMB5( ; ; nop, CMB5[0][0] -> 54.data, CMB5.fifos -> CMB5[1][9], save_pointers(CMB5));
        CMB6( ; ; nop, CMB6[0][0] -> 39.data, CMB6.fifos -> CMB1[1][7], save_pointers(CMB6));
        CMB7( ; ; nop, CMB7[0][0] -> 42.data, CMB7.fifos -> CMB2[1][7], save_pointers(CMB7));
        CMB8( ; ; nop, CMB8[0][0] -> 51.data, CMB8.fifos -> CMB9[1][11], save_pointers(CMB8));
        CMB9(41 in this[0][0] ; 41.data -> CMB9[0][0], CMB9.mode = seqsrcsink, detect_full(CMB9), CMB9.active = CMB9[0][0] as 41, CMB10[1][7] -> CMB9.fifos, start(CMB9); nop, CMB9[0][0] -> 41.data, CMB9.fifos -> CMB10[1][7], save_pointers(CMB9));
        CMB10(52 in this[0][0] ; 52.data -> CMB10[0][0], CMB10.mode = seqsrcsink, detect_empty(CMB10), CMB10.active = CMB10[0][0] as 52, CMB3[1][9] -> CMB10.fifos, start(CMB10), connect(CMB10.output0, CP0.input0); nop, CMB10[0][0] -> 52.data, CMB10.fifos -> CMB3[1][9], save_pointers(CMB10));
    }

}
